[{"/home/jake/a-eye/src/index.jsx":"1","/home/jake/a-eye/src/serviceWorker.js":"2","/home/jake/a-eye/src/App.jsx":"3","/home/jake/a-eye/src/landingPage/LandingPage.tsx":"4","/home/jake/a-eye/src/modulePage/ModulePage.tsx":"5","/home/jake/a-eye/src/aboutPage/AboutPage.tsx":"6","/home/jake/a-eye/src/Navbar.jsx":"7","/home/jake/a-eye/src/footer.jsx":"8","/home/jake/a-eye/src/landingPage/ModuleIntro.tsx":"9","/home/jake/a-eye/src/aboutPage/ProfileCard.tsx":"10","/home/jake/a-eye/src/modules/computerVision/haarWavelet/HaarWaveletDemo.tsx":"11","/home/jake/a-eye/src/modules/computerVision/gaussianBlur/GaussianBlurDemo.tsx":"12","/home/jake/a-eye/src/modules/computerVision/gaborFilter/gaborFilter.tsx":"13","/home/jake/a-eye/src/modules/computerVision/imageSelector/ImageSelectableDemo.tsx":"14","/home/jake/a-eye/src/modules/computerVision/diffofgaussian/DiffOfGaussian.tsx":"15","/home/jake/a-eye/src/modules/stateSpaces/pca/PCA.tsx":"16","/home/jake/a-eye/src/ModuleDropdown.jsx":"17","/home/jake/a-eye/src/modules/stateSpaces/kmeans/index.ts":"18","/home/jake/a-eye/src/modules/computerVision/haarWavelet/haarTransform.tsx":"19","/home/jake/a-eye/src/modules/computerVision/gaborFilter/AngleSelector.tsx":"20","/home/jake/a-eye/src/modules/computerVision/imageSelector/ImageSelector.tsx":"21","/home/jake/a-eye/src/modules/computerVision/common/InteractiveFilter.tsx":"22","/home/jake/a-eye/src/modules/computerVision/common/FilterByKernel.tsx":"23","/home/jake/a-eye/src/modules/computerVision/common/KernelDisplay.tsx":"24","/home/jake/a-eye/src/modules/computerVision/common/DiffofFiltered.tsx":"25","/home/jake/a-eye/src/modules/stateSpaces/common/BasicScatter.tsx":"26","/home/jake/a-eye/src/modules/stateSpaces/kmeans/interactiveClusteringExample.tsx":"27","/home/jake/a-eye/src/modules/stateSpaces/kmeans/kmeans.tsx":"28","/home/jake/a-eye/src/modules/stateSpaces/kmeans/kmeansStepExample.tsx":"29","/home/jake/a-eye/src/modules/computerVision/common/filter.tsx":"30","/home/jake/a-eye/src/modules/stateSpaces/kmeans/chartjs-plugin-dragdata.d.ts":"31","/home/jake/a-eye/src/modules/stateSpaces/kmeans/utils.ts":"32","/home/jake/a-eye/src/modulePage/ModuleSection.tsx":"33"},{"size":595,"mtime":1612418973820,"results":"34","hashOfConfig":"35"},{"size":5113,"mtime":1612418982668,"results":"36","hashOfConfig":"35"},{"size":1372,"mtime":1612405082000,"results":"37","hashOfConfig":"35"},{"size":2000,"mtime":1612412601730,"results":"38","hashOfConfig":"35"},{"size":1827,"mtime":1612420376986,"results":"39","hashOfConfig":"35"},{"size":2161,"mtime":1612402531147,"results":"40","hashOfConfig":"35"},{"size":1651,"mtime":1612402531147,"results":"41","hashOfConfig":"35"},{"size":1920,"mtime":1612418962549,"results":"42","hashOfConfig":"35"},{"size":1708,"mtime":1612412528073,"results":"43","hashOfConfig":"35"},{"size":2220,"mtime":1612412749944,"results":"44","hashOfConfig":"35"},{"size":1588,"mtime":1612422541466,"results":"45","hashOfConfig":"35"},{"size":3411,"mtime":1612417651195,"results":"46","hashOfConfig":"35"},{"size":6488,"mtime":1612417906175,"results":"47","hashOfConfig":"35"},{"size":1123,"mtime":1612417200037,"results":"48","hashOfConfig":"35"},{"size":5564,"mtime":1612420395096,"results":"49","hashOfConfig":"35"},{"size":6578,"mtime":1612420754611,"results":"50","hashOfConfig":"35"},{"size":1499,"mtime":1612421056529,"results":"51","hashOfConfig":"35"},{"size":252,"mtime":1612402766449,"results":"52","hashOfConfig":"35"},{"size":3641,"mtime":1612422564069,"results":"53","hashOfConfig":"35"},{"size":2588,"mtime":1612418712208,"results":"54","hashOfConfig":"35"},{"size":2029,"mtime":1612420230441,"results":"55","hashOfConfig":"35"},{"size":3039,"mtime":1612422411753,"results":"56","hashOfConfig":"35"},{"size":694,"mtime":1612422891586,"results":"57","hashOfConfig":"35"},{"size":1863,"mtime":1612421395000,"results":"58","hashOfConfig":"35"},{"size":1511,"mtime":1612422636577,"results":"59","hashOfConfig":"35"},{"size":1932,"mtime":1612413136210,"results":"60","hashOfConfig":"35"},{"size":11845,"mtime":1612420515594,"results":"61","hashOfConfig":"35"},{"size":2437,"mtime":1612413824646,"results":"62","hashOfConfig":"35"},{"size":6488,"mtime":1612420648781,"results":"63","hashOfConfig":"35"},{"size":3216,"mtime":1612423296297,"results":"64","hashOfConfig":"35"},{"size":88,"mtime":1612401993780,"results":"65","hashOfConfig":"35"},{"size":4473,"mtime":1612420505337,"results":"66","hashOfConfig":"35"},{"size":6843,"mtime":1612419252416,"results":"67","hashOfConfig":"35"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},"hg02ey",{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"77"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"70"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"77"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"77"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"77"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"77"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"77"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"77"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"139"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"77"},"/home/jake/a-eye/src/index.jsx",[],["145","146","147","148","149","150"],"/home/jake/a-eye/src/serviceWorker.js",[],"/home/jake/a-eye/src/App.jsx",[],"/home/jake/a-eye/src/landingPage/LandingPage.tsx",[],["151","152","153","154","155","156"],"/home/jake/a-eye/src/modulePage/ModulePage.tsx",[],"/home/jake/a-eye/src/aboutPage/AboutPage.tsx",[],"/home/jake/a-eye/src/Navbar.jsx",[],"/home/jake/a-eye/src/footer.jsx",[],"/home/jake/a-eye/src/landingPage/ModuleIntro.tsx",[],"/home/jake/a-eye/src/aboutPage/ProfileCard.tsx",[],"/home/jake/a-eye/src/modules/computerVision/haarWavelet/HaarWaveletDemo.tsx",["157"],"import React, { useState } from 'react';\nimport InteractiveFilter from '../common/InteractiveFilter';\nimport haarFilter from './haarTransform';\n\n/*\nhow does haar relate to normal kernel convolutions?\nWhat other configs/things to add to demo? currently not very intuitive\n*/\n\ntype HaarWaveletDemoType = {\n  labelColor: string;\n  imgUrl: string;\n};\n\nconst HaarWaveletDemo: React.FC<HaarWaveletDemoType> = ({\n  labelColor,\n  imgUrl,\n}) => {\n  const [recursions, setRecursions] = useState(3);\n\n  const invalidConfig = recursions < 1 || recursions > 10;\n\n  return (\n    <div>\n      <div className={`font-bold m-3 ${labelColor}`}>\n        Number of Recursions\n        <input\n          className=\"mx-2 w-64\"\n          type=\"range\"\n          min=\"1\"\n          max=\"10\"\n          step=\"1\"\n          value={recursions}\n          onChange={e => setRecursions(parseInt(e.target.value, 10))}\n        />\n        <input\n          className=\"number-input text-black\"\n          type=\"number\"\n          min=\"1\"\n          max=\"10\"\n          value={recursions}\n          onChange={e => setRecursions(parseInt(e.target.value, 10))}\n        />\n        <div className=\"font-light italic text-sm\">\n          {invalidConfig ? 'Enter an integer, between 1 and 10' : ''}\n        </div>\n      </div>\n      <InteractiveFilter\n        disabled={invalidConfig}\n        imgUrl={imgUrl}\n        filter={(inCanvas, outCanvas) => {\n          console.log('called filter function in haar filter');\n          haarFilter(inCanvas, outCanvas, recursions);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default HaarWaveletDemo;\n","/home/jake/a-eye/src/modules/computerVision/gaussianBlur/GaussianBlurDemo.tsx",[],"/home/jake/a-eye/src/modules/computerVision/gaborFilter/gaborFilter.tsx",[],"/home/jake/a-eye/src/modules/computerVision/imageSelector/ImageSelectableDemo.tsx",[],"/home/jake/a-eye/src/modules/computerVision/diffofgaussian/DiffOfGaussian.tsx",[],"/home/jake/a-eye/src/modules/stateSpaces/pca/PCA.tsx",[],"/home/jake/a-eye/src/ModuleDropdown.jsx",[],"/home/jake/a-eye/src/modules/stateSpaces/kmeans/index.ts",[],"/home/jake/a-eye/src/modules/computerVision/haarWavelet/haarTransform.tsx",["158"],"/* eslint-disable no-param-reassign */\n// https://stevenbas.art/examples/ImageProcessing/ex4/\n\nfunction oneDHaarTransform(pixRow: number[]) {\n  let sum = 0;\n  let diff = 0;\n  const halfLen = pixRow.length / 2;\n  const tempHaar = [];\n\n  // It only recurses on first half of the array\n  for (let i = 0; i < halfLen; i += 1) {\n    sum = pixRow[2 * i] + pixRow[2 * i + 1];\n    sum /= Math.sqrt(2);\n    diff = pixRow[2 * i] - pixRow[2 * i + 1];\n    diff /= Math.sqrt(2);\n    tempHaar[i] = sum;\n    tempHaar[i + halfLen] = diff;\n  }\n  for (let i = 0; i < pixRow.length; i += 1) {\n    pixRow[i] = tempHaar[i];\n  }\n}\n\n/**\n * Applies the haar transformation to the image in `inCanvas`, and draws the output\n * on `outCanvas`\n *\n * @param inCanvas\n * @param outCanvas\n * @param iterations how many recursions to do\n */\nfunction haarFilter(\n  inCanvas: HTMLCanvasElement,\n  outCanvas: HTMLCanvasElement,\n  iterations: number,\n) {\n  console.log('haar filter function call');\n  const inData = inCanvas\n    .getContext('2d')\n    ?.getImageData(0, 0, inCanvas.width, inCanvas.height);\n  const outData = outCanvas\n    .getContext('2d')\n    ?.getImageData(0, 0, outCanvas.width, outCanvas.height);\n  if (!inData || !outData) return;\n\n  const inPix = inData.data;\n  const imgWidth = inCanvas.width; // should be the same for outCanvas\n  const imgHeight = inCanvas.height;\n\n  // initialize array with original pix values\n  const haar: number[][][] = [];\n  for (let row = 0; row < imgHeight; row += 1) {\n    haar[row] = [];\n    for (let col = 0; col < imgWidth; col += 1) {\n      haar[row][col] = [];\n      for (let i = 0; i < 3; i += 1) {\n        haar[row][col][i] = inPix[4 * (row * imgWidth + col + i)];\n      }\n    }\n  }\n\n  // Do a Haar Wavelet Transform\n  let currWidth = imgWidth;\n  let currHeight = imgHeight;\n  let haarRow = [];\n  while ((currWidth > 1 || currHeight > 1) && iterations > 1) {\n    iterations -= 1;\n\n    // Do it for each row first\n    if (currWidth > 1) {\n      for (let row = 0; row < currHeight; row += 1) {\n        for (let i = 0; i < 3; i += 1) {\n          for (let col = 0; col < currWidth; col += 1) {\n            haarRow[col] = haar[row][col][i];\n          }\n\n          oneDHaarTransform(haarRow);\n\n          for (let col = 0; col < currWidth; col += 1) {\n            haar[row][col][i] = haarRow[col];\n          }\n        }\n      }\n    }\n\n    // Then perform Haar transform on each column\n    haarRow = [];\n    if (currHeight > 1) {\n      for (let col = 0; col < currWidth; col += 1) {\n        for (let i = 0; i < 3; i += 1) {\n          for (let row = 0; row < currHeight; row += 1) {\n            haarRow[row] = haar[row][col][i];\n          }\n\n          oneDHaarTransform(haarRow);\n\n          for (let row = 0; row < currHeight; row += 1) {\n            haar[row][col][i] = haarRow[row];\n          }\n        }\n      }\n    }\n    haarRow = [];\n\n    if (currHeight > 1) {\n      currHeight /= 2;\n    }\n    if (currWidth > 1) {\n      currWidth /= 2;\n    }\n  }\n\n  // Copy pix data to canvas\n  const outPix = outData.data;\n  for (let row = 0; row < imgHeight; row += 1) {\n    for (let col = 0; col < imgWidth; col += 1) {\n      // TODO: array destructuring\n      // eslint-disable-next-line\n      outPix[4 * (row * imgWidth + col)] = haar[row][col][0];\n      // eslint-disable-next-line\n      outPix[4 * (row * imgWidth + col) + 1] = haar[row][col][1];\n      // eslint-disable-next-line\n      outPix[4 * (row * imgWidth + col) + 2] = haar[row][col][2];\n      // eslint-disable-next-line\n      outPix[4 * (row * imgWidth + col) + 3] = 255;\n    }\n  }\n  outCanvas.getContext('2d')?.putImageData(outData, 0, 0);\n}\n\nexport default haarFilter;\n","/home/jake/a-eye/src/modules/computerVision/gaborFilter/AngleSelector.tsx",[],"/home/jake/a-eye/src/modules/computerVision/imageSelector/ImageSelector.tsx",[],"/home/jake/a-eye/src/modules/computerVision/common/InteractiveFilter.tsx",["159"],"import React, { useLayoutEffect, useRef, useState } from 'react';\n\n// http://dev.theomader.com/gaussian-kernel-calculator/\n// https://blog.cloudboost.io/using-html5-canvas-with-react-ff7d93f5dc76\n\n/**\n *\n * @param props\n * @param props.filter  function that writes a filtered image to `outCanvas`,\n *                      given the original image on `inCanvas`\n * @param props.imgUrl  url to the image to display\n * @param props.disabled  whether or not the \"apply filter\" button should be disabled\n */\ntype InteractiveFilterType = {\n  filter: (inCanvas: HTMLCanvasElement, outCanvas: HTMLCanvasElement) => any;\n  imgUrl: string;\n  disabled: boolean;\n};\nconst InteractiveFilter: React.FC<InteractiveFilterType> = ({\n  filter,\n  imgUrl,\n  disabled,\n}) => {\n  const [isFiltered, setIsFiltered] = useState(false);\n  const [imgWidth, setImgWidth] = useState<number | undefined>(undefined);\n  const [imgHeight, setImgHeight] = useState<number | undefined>(undefined);\n  const inputCanvas = useRef<HTMLCanvasElement>(null);\n  const outputCanvas = useRef<HTMLCanvasElement>(null);\n  const imgRef = useRef<HTMLImageElement>(null);\n\n  useLayoutEffect(() => {\n    const inputElem = inputCanvas.current; // get the DOM element for the canvas\n    const outputElem = outputCanvas.current;\n    const imgElem = imgRef.current;\n    if (!(inputElem && outputElem && imgElem)) return;\n\n    imgElem.onload = () => {\n      setImgHeight(imgElem.height);\n      setImgWidth(imgElem.width);\n      inputElem.getContext('2d')?.drawImage(imgElem, 0, 0);\n      outputElem.getContext('2d')?.drawImage(imgElem, 0, 0);\n    };\n  }, []);\n\n  const applyFilter = () => {\n    const inputElem = inputCanvas.current; // get the DOM element for the canvas\n    const outputElem = outputCanvas.current;\n    if (!(inputElem && outputElem)) return;\n    console.log('applying filter with', inputElem, outputElem);\n    filter(inputElem, outputElem);\n    setIsFiltered(true);\n  };\n\n  const resetImage = () => {\n    const outputElem = outputCanvas.current;\n    const imgElem = imgRef.current;\n    if (!(outputElem && imgElem)) return;\n    const ctxt = outputElem.getContext('2d');\n    ctxt?.clearRect(0, 0, ctxt.canvas.width, ctxt.canvas.height);\n    ctxt?.drawImage(imgElem, 0, 0);\n    setIsFiltered(false);\n  };\n\n  return (\n    <div>\n      <div>\n        <img ref={imgRef} src={imgUrl} alt=\"input\" className=\"hidden\" />\n        <canvas\n          className=\"inline m-2 crisp-pixels w-35vw\"\n          ref={inputCanvas}\n          width={imgWidth}\n          height={imgHeight}\n        />\n        <canvas\n          className=\"inline m-2 crisp-pixels w-35vw\"\n          ref={outputCanvas}\n          width={imgRef.current?.width}\n          height={imgRef.current?.height}\n        />\n      </div>\n      <button\n        type=\"button\"\n        className=\"basic-button\"\n        disabled={disabled}\n        onClick={() => (isFiltered ? resetImage() : applyFilter())}\n      >\n        {isFiltered ? 'Reset Image' : 'Apply Filter'}\n      </button>\n    </div>\n  );\n};\n\nexport default InteractiveFilter;\n","/home/jake/a-eye/src/modules/computerVision/common/FilterByKernel.tsx",["160"],"import React from 'react';\nimport InteractiveFilter from './InteractiveFilter';\nimport { convolute } from './filter';\n\n// http://dev.theomader.com/gaussian-kernel-calculator/\n// https://blog.cloudboost.io/using-html5-canvas-with-react-ff7d93f5dc76\n\ntype FilterByKernelType = {\n  kernel?: number[];\n  imgUrl: string;\n};\n\nconst FilterByKernel: React.FC<FilterByKernelType> = ({ kernel, imgUrl }) => (\n  <InteractiveFilter\n    disabled={!kernel}\n    imgUrl={imgUrl}\n    filter={(inCanvas, outCanvas) => {\n      console.log('in filter by kernel', inCanvas, outCanvas);\n      if (kernel) {\n        convolute(inCanvas, outCanvas, true, kernel);\n      }\n    }}\n  />\n);\n\nexport default FilterByKernel;\n","/home/jake/a-eye/src/modules/computerVision/common/KernelDisplay.tsx",["161"],"import React, { useState } from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Switch from '@material-ui/core/Switch';\n\nfunction getCellColor(val: number, max: number, min: number) {\n  if (max === min) {\n    return 'rgb(0, 212, 192)';\n  }\n  const red = 255 - ((val - min) / (max - min)) * 255;\n  return `rgb(${red}, 212, 192)`;\n}\n\ntype KernelGridType = {\n  kernelGrid?: number[][];\n  labelColor: string;\n};\n\nconst KernelDisplay: React.FC<KernelGridType> = ({\n  kernelGrid = undefined,\n  labelColor,\n}) => {\n  const [showNums, setShowNums] = useState(true);\n\n  if (!kernelGrid) return <></>;\n\n  let max = 0;\n  let min = Infinity;\n  kernelGrid.forEach(row =>\n    row.forEach(ele => {\n      if (ele > max) max = ele;\n      if (ele < min) min = ele;\n    }),\n  );\n\n  const getCell = (val: number, j: number) => {\n    const color = getCellColor(val, max, min);\n    return (\n      <td\n        className=\"h-1 w-1 border border-charcoal p-2\"\n        key={j}\n        style={{\n          background: color,\n          color: !showNums ? color : undefined,\n        }}\n        title={`${val}`}\n      >\n        {val.toFixed(3)}\n      </td>\n    );\n  };\n\n  return (\n    <div className=\"text-black font-normal font-xs\">\n      <div className=\"mx-auto my-4 max-w-5xl max-h-lg overflow-auto\">\n        <table className=\"m-auto\">\n          <tbody>\n            {kernelGrid.map((row, i) => (\n              <tr key={i}>{row.map((val, j) => getCell(val, j))}</tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n      <FormControlLabel\n        control={\n          <Switch\n            checked={showNums}\n            onChange={e => setShowNums(e.target.checked)}\n            color=\"primary\"\n          />\n        }\n        className={labelColor}\n        label=\"Show kernel numbers\"\n      />\n    </div>\n  );\n};\n\nexport default KernelDisplay;\n","/home/jake/a-eye/src/modules/computerVision/common/DiffofFiltered.tsx",["162"],"import React from 'react';\nimport InteractiveFilter from './InteractiveFilter';\nimport { convolute, getPixels } from './filter';\n\n// http://dev.theomader.com/gaussian-kernel-calculator/\n// https://blog.cloudboost.io/using-html5-canvas-with-react-ff7d93f5dc76\n\ntype DiffByKernelType = {\n  kernel?: number[];\n  kernel2?: number[];\n  imgUrl: string;\n};\n\nconst FilterByDiffKernel: React.FC<DiffByKernelType> = ({\n  kernel,\n  kernel2,\n  imgUrl,\n}) => (\n  <InteractiveFilter\n    disabled={!kernel}\n    imgUrl={imgUrl}\n    filter={(inCanvas, outCanvas) => {\n      console.log(\n        'big switch in FilterByDiffKernel',\n        inCanvas,\n        outCanvas,\n        kernel,\n        kernel2,\n      );\n      if (kernel) {\n        convolute(inCanvas, outCanvas, false, kernel);\n      }\n      const check = getPixels(outCanvas);\n      if (!check) {\n        return;\n      }\n      const result1 = Uint8ClampedArray.from(check.data);\n\n      if (kernel2) {\n        convolute(inCanvas, outCanvas, false, kernel2);\n      }\n      const check2 = getPixels(outCanvas);\n\n      if (!check2) {\n        return;\n      }\n      const result2 = Uint8ClampedArray.from(check2.data);\n\n      const { width } = check;\n      const { height } = check;\n\n      const diff = result1.map((pix, i) =>\n        (i + 1) % 4 === 0 ? 255 : 255 - Math.abs(pix - result2[i]),\n      );\n\n      const output = new ImageData(diff, width, height);\n\n      outCanvas.getContext('2d')?.putImageData(output, 0, 0);\n    }}\n  />\n);\n\nexport default FilterByDiffKernel;\n","/home/jake/a-eye/src/modules/stateSpaces/common/BasicScatter.tsx",[],"/home/jake/a-eye/src/modules/stateSpaces/kmeans/interactiveClusteringExample.tsx",[],"/home/jake/a-eye/src/modules/stateSpaces/kmeans/kmeans.tsx",[],"/home/jake/a-eye/src/modules/stateSpaces/kmeans/kmeansStepExample.tsx",[],"/home/jake/a-eye/src/modules/computerVision/common/filter.tsx",["163","164"],"/// utility functions for filtering / manipulating a DOM canvas\n// reference: https://www.html5rocks.com/en/tutorials/canvas/imagefilters/\n\nfunction getPixels(canvas: HTMLCanvasElement) {\n  const ctx = canvas.getContext('2d');\n  return ctx && ctx.getImageData(0, 0, canvas.width, canvas.height);\n}\n\n/**\n * Run an image convolution based on inCanvas, and draws the output to outCanvas.\n * Don't ask me how any of this works!!!! I dont know!!!!!!!\n *\n * @param inCanvas the canvas to be filtered, with an image already drawn on it\n * @param outCanvas the canvas to be outputted to\n * @param animate whether or not to animate the filter by each row of pixels\n * @param weights the kernel (matrix of numbers)\n * @param opaque (optional) is the image opaque?\n */\nfunction convolute(\n  inCanvas: HTMLCanvasElement,\n  outCanvas: HTMLCanvasElement,\n  animate: boolean,\n  weights: number[],\n  opaque?: boolean,\n) {\n  console.log('convolute', inCanvas, outCanvas, animate, weights, opaque);\n  const pixels = getPixels(inCanvas);\n  console.log(' is the out canvas the problem?', pixels);\n  const output = getPixels(outCanvas);\n  if (!pixels || !output) return;\n\n  const side = Math.round(Math.sqrt(weights.length));\n  const halfSide = Math.floor(side / 2);\n  const src = pixels.data;\n  const sw = pixels.width;\n  const sh = pixels.height;\n  // pad output by the convolution matrix\n  const w = sw;\n  const h = sh;\n  const dst = output.data;\n  // go through the destination image pixels\n  const alphaFac = opaque ? 1 : 0;\n\n  const processRow = (y: number) => {\n    for (let x = 0; x < w; x += 1) {\n      const sy = y;\n      const sx = x;\n      const dstOff = (y * w + x) * 4;\n      const nextDstOff = ((y + 1) * w + x) * 4;\n      // calculate the weighed sum of the source image pixels that\n      // fall under the convolution matrix\n      let r = 0;\n      let g = 0;\n      let b = 0;\n      let a = 0;\n      for (let cy = 0; cy < side; cy += 1) {\n        for (let cx = 0; cx < side; cx += 1) {\n          const scy = sy + cy - halfSide;\n          const scx = sx + cx - halfSide;\n          if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\n            const srcOff = (scy * sw + scx) * 4;\n            const wt = weights[cy * side + cx];\n            r += src[srcOff] * wt;\n            g += src[srcOff + 1] * wt;\n            b += src[srcOff + 2] * wt;\n            a += src[srcOff + 3] * wt;\n          }\n        }\n      }\n\n      dst[dstOff] = r;\n      dst[dstOff + 1] = g;\n      dst[dstOff + 2] = b;\n      dst[dstOff + 3] = a + alphaFac * (255 - a);\n      dst[nextDstOff] = 255;\n      dst[nextDstOff + 1] = 0;\n      dst[nextDstOff + 2] = 0;\n    }\n  };\n\n  if (animate) {\n    let y = 0;\n    const interval = setInterval(() => {\n      processRow(y);\n      outCanvas.getContext('2d')?.putImageData(output, 0, 0);\n      y += 1;\n      if (y >= h) clearInterval(interval);\n    }, 10);\n  } else {\n    for (let y = 0; y < h; y += 1) {\n      processRow(y);\n    }\n    outCanvas.getContext('2d')?.putImageData(output, 0, 0);\n  }\n}\n\nfunction createImageData(canvas: HTMLCanvasElement) {\n  const ctx = canvas.getContext('2d');\n  return ctx && ctx.createImageData(canvas.width, canvas.height);\n}\n\nexport { convolute, getPixels, createImageData };\n","/home/jake/a-eye/src/modules/stateSpaces/kmeans/chartjs-plugin-dragdata.d.ts",[],["165","166","167","168","169","170"],"/home/jake/a-eye/src/modules/stateSpaces/kmeans/utils.ts",[],"/home/jake/a-eye/src/modulePage/ModuleSection.tsx",["171"],"import React from 'react';\nimport GaussianBlurDemo from '../modules/computerVision/gaussianBlur/GaussianBlurDemo';\nimport GaborDemo from '../modules/computerVision/gaborFilter/gaborFilter';\nimport DiffOfGaussianDemo from '../modules/computerVision/diffofgaussian/DiffOfGaussian';\nimport HaarWaveletDemo from '../modules/computerVision/haarWavelet/HaarWaveletDemo';\nimport { ImageSelectableDemo } from '../modules/computerVision/imageSelector/ImageSelectableDemo';\nimport PCADemo, {\n  RawDataTable,\n  SelectableAxisChart,\n  StaticAxisChart,\n  config as pcaConfig,\n} from '../modules/stateSpaces/pca/PCA';\n\nimport KMeans, {\n  KMeansStepExample,\n  InteractiveClusteringExample,\n} from '../modules/stateSpaces/kmeans';\nimport blank from '../media/modules/blank.png';\nimport animation1 from '../media/modules/computerVision/animation-1.gif';\nimport animation2 from '../media/modules/computerVision/animation-2.gif';\nimport animation3 from '../media/modules/computerVision/animation-3.gif';\n\nconst lorem =\n  'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\n\ninterface ColorScheme {\n  bgColor: string;\n  titleColor: string;\n  headingColor: string;\n  bodyColor: string;\n  labelColorHex: string;\n}\n\ninterface ModuleSubsection {\n  title: string;\n  body: string;\n  imgSrc: string;\n}\n\nfunction GetImage(imgName: string) {\n  switch (imgName) {\n    case 'blank':\n      return blank;\n    case 'animation1':\n      return animation1;\n    case 'animation2':\n      return animation2;\n    case 'animation3':\n      return animation3;\n    default:\n  }\n}\n\nfunction getDemo(comp: string, scheme: ColorScheme) {\n  const demoArgs = { labelColor: scheme.titleColor };\n\n  switch (comp) {\n    case 'GaussianBlurDemo':\n      return (\n        <ImageSelectableDemo\n          Demo={GaussianBlurDemo}\n          initImg=\"purpleFlowers.jpeg\"\n          demoProps={demoArgs}\n        />\n      );\n    case 'GaborDemo':\n      return (\n        <ImageSelectableDemo\n          Demo={GaborDemo}\n          initImg=\"zebra.jpg\"\n          demoProps={demoArgs}\n        />\n      );\n    case 'DiffOfGaussian':\n      return (\n        <ImageSelectableDemo\n          Demo={DiffOfGaussianDemo}\n          initImg=\"tabbyCat.jpg\"\n          demoProps={demoArgs}\n        />\n      );\n    case 'HaarWaveletDemo':\n      return (\n        <ImageSelectableDemo\n          Demo={HaarWaveletDemo}\n          initImg=\"bwWoman.jpg\"\n          demoProps={demoArgs}\n        />\n      );\n    case 'PCADemo':\n      return <PCADemo {...demoArgs} />;\n    case 'RawDataTable':\n      return <RawDataTable />;\n    case 'StaticAxisChart':\n      return (\n        <StaticAxisChart\n          xIdx={4}\n          yIdx={5}\n          columnSet={pcaConfig.columns}\n          classes={['versicolor', 'setosa']}\n          labelColorHex={scheme.labelColorHex}\n        />\n      );\n    case 'SelectableAxisChart':\n      return (\n        <SelectableAxisChart\n          columnSet={pcaConfig.columns}\n          initXIdx={4}\n          initYIdx={5}\n          labelColor={scheme.titleColor}\n          labelColorHex={scheme.labelColorHex}\n        />\n      );\n    case 'PCASelectableAxisChart':\n      return (\n        <SelectableAxisChart\n          columnSet={pcaConfig.pcaColumns}\n          initXIdx={0}\n          initYIdx={1}\n          labelColor={scheme.titleColor}\n          labelColorHex={scheme.labelColorHex}\n        />\n      );\n    case 'InteractiveKMeans':\n      return (\n        <div>\n          <InteractiveClusteringExample hidden={false} />\n        </div>\n      );\n    case 'StepKMeans':\n      return (\n        <div>\n          <KMeansStepExample hidden={false} />\n        </div>\n      );\n    case 'KMeans':\n      return <KMeans />;\n    default:\n      return <div />;\n  }\n}\n\n/**\n * Renders a single section on the module page.\n *\n * @param props.title section title\n * @param props.sections subsections of the section\n * @param props.colorScheme configuration for the section's color scheme, see ColorScheme interface\n * @param props.demoComp name of the React component used as a demo\n */\ntype ModuleSectionType = {\n  title: string;\n  sections: ModuleSubsection[];\n  colorScheme: string;\n  key: string;\n  demoComp: string;\n};\nconst ModuleSection: React.FC<ModuleSectionType> = ({\n  title,\n  sections,\n  colorScheme,\n  demoComp,\n}) => {\n  const scheme =\n    colorScheme === 'dark'\n      ? {\n          bgColor: 'bg-moduleDarkBlue',\n          titleColor: 'text-modulePaleBlue',\n          headingColor: 'text-moduleTeal',\n          bodyColor: 'text-moduleOffwhite',\n          labelColorHex: '#CBD9F2',\n        }\n      : {\n          bgColor: 'bg-modulePaleBlue',\n          titleColor: 'text-moduleNavy',\n          headingColor: 'text-moduleDarkBlue',\n          bodyColor: 'text-moduleNavy',\n          labelColorHex: '#394D73',\n        };\n\n  return (\n    <div className={`flex flex-col w-screen ${scheme.bgColor}`}>\n      <div className=\"mx-12 md:mx-40\">\n        <p\n          className={`my-12 text-3xl md:text-6xl italic font-bold font-opensans ${scheme.titleColor}`}\n        >\n          {title}\n        </p>\n        <ul className=\"\">\n          {sections.map((section, index) => (\n            <div\n              className={`flex flex-col md:flex-row mx-2 md:my-5 ${\n                section.imgSrc === '/blank.png' && 'my-10'\n              } ${section.body ? '' : 'hidden'}`}\n              key={index}\n            >\n              <img\n                src={GetImage(section.imgSrc)}\n                alt=\"\"\n                className={`hidden ${index % 2 !== 0 && 'md:flex'} ${\n                  section.imgSrc === '/blank.png'\n                    ? 'hidden md:object-none'\n                    : 'object-contain'\n                } md:w-1/4 md:mr-16 md:-mt-12`}\n              />\n              <div className=\"md:w-2/3 flex-col\">\n                <p\n                  className={`my-2 text-left text-lg font-medium font-mono ${scheme.bodyColor}`}\n                >\n                  {section.body || lorem}\n                </p>\n              </div>\n              <img\n                src={GetImage(section.imgSrc)}\n                alt=\"\"\n                className={`${index % 2 !== 0 && 'md:hidden'} ${\n                  section.imgSrc === '/blank.png'\n                    ? 'hidden md:object-none'\n                    : 'object-contain'\n                } md:w-1/4 md:mr-16 md:-mt-12`}\n              />\n            </div>\n          ))}\n        </ul>\n        {getDemo(demoComp, scheme)}\n      </div>\n    </div>\n  );\n};\n\nexport default ModuleSection;\n",{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"172","replacedBy":"184"},{"ruleId":"174","replacedBy":"175"},{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"185","severity":1,"message":"186","line":52,"column":11,"nodeType":"187","messageId":"188","endLine":52,"endColumn":22},{"ruleId":"185","severity":1,"message":"186","line":37,"column":3,"nodeType":"187","messageId":"188","endLine":37,"endColumn":14},{"ruleId":"185","severity":1,"message":"186","line":49,"column":5,"nodeType":"187","messageId":"188","endLine":49,"endColumn":16},{"ruleId":"185","severity":1,"message":"186","line":18,"column":7,"nodeType":"187","messageId":"188","endLine":18,"endColumn":18},{"ruleId":"189","severity":1,"message":"190","line":58,"column":24,"nodeType":"191","endLine":58,"endColumn":25},{"ruleId":"185","severity":1,"message":"186","line":23,"column":7,"nodeType":"187","messageId":"188","endLine":23,"endColumn":18},{"ruleId":"185","severity":1,"message":"186","line":26,"column":3,"nodeType":"187","messageId":"188","endLine":26,"endColumn":14},{"ruleId":"185","severity":1,"message":"186","line":28,"column":3,"nodeType":"187","messageId":"188","endLine":28,"endColumn":14},{"ruleId":"172","replacedBy":"192"},{"ruleId":"174","replacedBy":"193"},{"ruleId":"176","replacedBy":"194"},{"ruleId":"178","replacedBy":"195"},{"ruleId":"180","replacedBy":"196"},{"ruleId":"182","replacedBy":"197"},{"ruleId":"189","severity":1,"message":"190","line":195,"column":20,"nodeType":"191","endLine":195,"endColumn":25},"jsx-a11y/accessible-emoji",[],"lines-around-directive",["198"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],[],"no-console","Unexpected console statement.","MemberExpression","unexpected","react/no-array-index-key","Do not use Array index in keys","Identifier",[],["198"],[],[],[],[],"padding-line-between-statements"]