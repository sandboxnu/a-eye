[{"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\index.js":"1","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\serviceWorker.js":"2","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\App.js":"3","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\footer.js":"4","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\Navbar.js":"5","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\aboutPage\\AboutPage.tsx":"6","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\ModuleDropdown.js":"7","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\aboutPage\\ProfileCard.tsx":"8","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\pca\\PCA.tsx":"9","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\gaborFilter\\gaborFilter.tsx":"10","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\diffofgaussian\\DiffOfGaussian.tsx":"11","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\haarWavelet\\HaarWaveletDemo.tsx":"12","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\imageSelector\\ImageSelectableDemo.tsx":"13","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\gaussianBlur\\GaussianBlurDemo.tsx":"14","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\index.ts":"15","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\gaborFilter\\AngleSelector.tsx":"16","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\haarWavelet\\haarTransform.tsx":"17","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\imageSelector\\ImageSelector.tsx":"18","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\common\\BasicScatter.tsx":"19","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\FilterByKernel.tsx":"20","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\InteractiveFilter.tsx":"21","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\DiffofFiltered.tsx":"22","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\kmeans.tsx":"23","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\kmeansStepExample.tsx":"24","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\interactiveClusteringExample.tsx":"25","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\filter.tsx":"26","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\utils.ts":"27","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\chartjs-plugin-dragdata.d.ts":"28","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\landingPage\\LandingPage.tsx":"29","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modulePage\\ModulePage.tsx":"30","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\landingPage\\ModuleIntro.tsx":"31","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modulePage\\ModuleSection.tsx":"32","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\KernelDisplay.tsx":"33"},{"size":587,"mtime":1607226183840,"results":"34","hashOfConfig":"35"},{"size":5227,"mtime":1599872057019,"results":"36","hashOfConfig":"35"},{"size":1461,"mtime":1612296468934,"results":"37","hashOfConfig":"35"},{"size":1877,"mtime":1612297575160,"results":"38","hashOfConfig":"35"},{"size":1673,"mtime":1612297575148,"results":"39","hashOfConfig":"35"},{"size":2354,"mtime":1612297575148,"results":"40","hashOfConfig":"35"},{"size":1789,"mtime":1607226183827,"results":"41","hashOfConfig":"35"},{"size":2321,"mtime":1612297575149,"results":"42","hashOfConfig":"35"},{"size":8486,"mtime":1612382660335,"results":"43","hashOfConfig":"35"},{"size":6553,"mtime":1612296469009,"results":"44","hashOfConfig":"35"},{"size":5664,"mtime":1612296469009,"results":"45","hashOfConfig":"35"},{"size":1553,"mtime":1604864993872,"results":"46","hashOfConfig":"35"},{"size":1212,"mtime":1612297575199,"results":"47","hashOfConfig":"35"},{"size":3413,"mtime":1612296469010,"results":"48","hashOfConfig":"35"},{"size":257,"mtime":1612381056077,"results":"49","hashOfConfig":"35"},{"size":2919,"mtime":1604864993867,"results":"50","hashOfConfig":"35"},{"size":3903,"mtime":1612104900848,"results":"51","hashOfConfig":"35"},{"size":2090,"mtime":1612297575199,"results":"52","hashOfConfig":"35"},{"size":2043,"mtime":1607226183851,"results":"53","hashOfConfig":"54"},{"size":651,"mtime":1604864993863,"results":"55","hashOfConfig":"35"},{"size":3075,"mtime":1604864993864,"results":"56","hashOfConfig":"35"},{"size":1746,"mtime":1604864993862,"results":"57","hashOfConfig":"35"},{"size":2929,"mtime":1612378262269,"results":"58","hashOfConfig":"35"},{"size":5962,"mtime":1612378262269,"results":"59","hashOfConfig":"35"},{"size":12489,"mtime":1612381012385,"results":"60","hashOfConfig":"35"},{"size":3094,"mtime":1604864993864,"results":"61","hashOfConfig":"35"},{"size":5199,"mtime":1612382019591,"results":"62","hashOfConfig":"35"},{"size":91,"mtime":1612297575199,"results":"63","hashOfConfig":"35"},{"size":1993,"mtime":1612297575160,"results":"64","hashOfConfig":"35"},{"size":2034,"mtime":1612297575197,"results":"65","hashOfConfig":"35"},{"size":1246,"mtime":1612297575160,"results":"66","hashOfConfig":"35"},{"size":5922,"mtime":1612380761594,"results":"67","hashOfConfig":"35"},{"size":2153,"mtime":1612296469036,"results":"68","hashOfConfig":"35"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"39apja",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"82"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"82"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},"1bhyau",{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"82"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"82"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"82"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\index.js",[],["148","149"],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\serviceWorker.js",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\App.js",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\footer.js",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\Navbar.js",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\aboutPage\\AboutPage.tsx",[],["150","151"],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\ModuleDropdown.js",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\aboutPage\\ProfileCard.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\pca\\PCA.tsx",["152","153","154","155"],"import React, { useState } from 'react';\r\nimport { PCA } from 'ml-pca';\r\nimport { Matrix } from 'ml-matrix';\r\n// import datasetIris from 'ml-dataset-iris';\r\n\r\nimport irisData from '../datasets/iris.json';\r\nimport bookData from '../datasets/books.json';\r\n\r\n\r\n// import { BasicScatter, DataSeriesMap, ColorMap } from '../common/BasicScatter';\r\nimport { DataSeriesMap } from '../common/BasicScatter';\r\nimport './PCA.css';\r\n\r\ntype PCAProps = {labelColor: string, labelColorHex?: string};\r\n\r\n/**\r\n * Interactive demo of PCA.\r\n * \r\n * @param labelColor color of the demo's label (as a tailwind class name)\r\n * @param labelColorHex hex color of the demo's label\r\n */\r\nexport const PCADemo = ({labelColor, labelColorHex = ''}: PCAProps) => {\r\n\r\n    return (\r\n        <div className={`PCA-div ${labelColor}`}>\r\n            <p> hi </p>\r\n            {/* <RawDataTable /> */}\r\n            {/* <StaticAxisChart xIdx={[4]} yIdx={[5]} columnSet={[columns]} classes={[[\"versicolor\", \"setosa\"]]} labelColorHex={labelColorHex} /> */}\r\n            {/* <SelectableAxisChart columnSet={columns} initXIdx={2} initYIdx={3} labelColor={\"text-white\"} labelColorHex={labelColorHex} />\r\n            <SelectableAxisChart columnSet={pcaColumns} initXIdx={0} initYIdx={1} labelColor={\"text-white\"} labelColorHex={labelColorHex} /> */}\r\n        </div>\r\n    );\r\n}\r\n\r\n// export const RawDataTable = () => {\r\n//     const [showClass, setShowClass] = useState(false);\r\n\r\n\r\n//     return (\r\n//     <div className=\"container flex mx-auto my-4\">\r\n//         <div className=\"pca raw-data-table mx-auto\">\r\n//             <table className=\"table-auto\">\r\n//                 <thead>\r\n//                     <tr>\r\n//                         {columns.map(title => title && <th key={title}>{title}</th>)}\r\n//                         <th className=\"cursor-pointer\"\r\n//                             onClick={() => {setShowClass(!showClass)}}\r\n//                             title={showClass ? 'Hide Classes' : 'Display Classes'}>\r\n//                             {showClass ? 'Class' : '►'}\r\n//                         </th>\r\n//                     </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                     {dataset.map((row: number[], idx: number) => {\r\n//                         return (\r\n//                             <tr key={idx} className=\"'datarow' text-white\">\r\n//                                 {row.map((val: number, idx: number) => <td key={idx}>{val}</td>)}\r\n//                                 <td>{showClass && classes[idx]}</td>\r\n//                             </tr>);\r\n//                     })}\r\n//                 </tbody>\r\n//             </table>\r\n//         </div>\r\n//     </div>);\r\n// }\r\n\r\n\r\n// // Plot all samples in dataset, choose what 2 features to use as the axes\r\n// export const SelectableAxisChart = (props: { columnSet: string[], initXIdx: number, initYIdx: number, labelColor: string, labelColorHex: string }) => {\r\n//     const [xIdx, setXIdx] = useState(props.initXIdx);\r\n//     const [yIdx, setYIdx] = useState(props.initYIdx);\r\n//     const points: DataSeriesMap = {};\r\n//     Object.entries(dataByClass).forEach(([dataClass, nums]) => {\r\n//         points[dataClass] = nums.map(row => ({ x: row[xIdx], y: row[yIdx] }));\r\n//     })\r\n\r\n//     return (\r\n//         <div className=\"pca raw-data-chart\">\r\n//             <div className=\"select-axis-menu yIdx\">\r\n//                 <p className={`font-opensans font-bold italic ${props.labelColor}`}> Select Y Axis </p>\r\n//                 <AxisSelector selected={yIdx} onChange={setYIdx} columnSet={props.columnSet} />\r\n//             </div>\r\n//             <div className=\"raw-data-scatter\">\r\n//                 <BasicScatter colorMap={colorMap} points={points} xLabel={props.columnSet[xIdx]} yLabel={props.columnSet[yIdx]} labelColorHex={props.labelColorHex} />\r\n//             </div>\r\n//             <div className=\"select-axis-menu xIdx\">\r\n//                 <p className={`font-opensans font-bold italic ${props.labelColor}`}> Select X Axis</p>\r\n//                 <AxisSelector selected={xIdx} onChange={setXIdx} columnSet={props.columnSet} />\r\n//             </div>\r\n//         </div>);\r\n// };\r\n\r\nexport const StaticAxisChart = (props:pcaDataInterface[]) => {\r\n    //props: { xIdx: number, yIdx: number, columnSet: string[], classes: string[], labelColorHex: string \r\n    \r\n    const [selectedData, setO] = useState(0);\r\n    const changeO = (nextDataset: number) =>  setO(nextDataset);\r\n\r\n    const points: DataSeriesMap = {};\r\n    props[selectedData].pcaColumns.forEach((dataClass) => {\r\n        // points[dataClass] = props[selectedData].prediction\r\n\r\n        \r\n        \r\n        // .map(row => ({ x: row[props.xIdx[selectedData]], y: row[props.yIdx[selectedData]] }));\r\n    });\r\n\r\n    const datasetLabel = [\r\n        \"Original Dataset\",\r\n        \"Iris Sepal Dataset\",\r\n        \"Iris Petal Dataset\",\r\n        \"Books Dataset\",\r\n    ];\r\n\r\n    // const curXIdx = props.xIdx[selectedData];\r\n    // const curYIdx = props.yIdx[selectedData];\r\n\r\n    return (\r\n        <div className=\"pca pca-chart\">\r\n            hi\r\n            {/* <div className=\"raw-data-scatter\">\r\n                <BasicScatter colorMap={colorMap} points={points} xLabel={props.columnSet[selectedData][curXIdx]} yLabel={props.columnSet[selectedData][curYIdx]} labelColorHex={props.labelColorHex} />\r\n            </div>\r\n                <button onClick={e => changeO((selectedData+1) % 4)}>Current: {datasetLabel[selectedData]}</button> */}\r\n        </div>);\r\n}\r\n\r\nexport const AxisSelector = (props: { columnSet: string[], selected: number, onChange: (arg: number) => void }) =>\r\n    (<div className=\"axis-selector\">\r\n        {props.columnSet.map((col, idx) => (\r\n            col && <button\r\n                className={props.selected === idx ? \"selected\" : \"\"}\r\n                key={col}\r\n                onClick={() => props.onChange(idx)}>\r\n                {col}\r\n            </button>\r\n        ))}\r\n    </div>);\r\n\r\nconst COLORS = ['#003f5c', '#ef5675', '#FFC107', '#00B0FF', '#FF3D00', '#4DB6AC'];\r\n\r\n// ----- iris pca ----\r\nconst irisColumns= ['', '', 'Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width'];\r\nconst irisPcaColumns=  ['PC1', 'PC2', 'Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width'];\r\n\r\nlet irisDataset: number[][] = [];\r\nlet irisClasses: string[] = [];\r\n\r\nirisData.forEach(({\r\n    sepalLength,\r\n    sepalWidth,\r\n    petalLength,\r\n    petalWidth,\r\n    species\r\n}) => {\r\n    irisDataset.push([\r\n        sepalLength,\r\n        sepalWidth,\r\n        petalLength,\r\n        petalWidth \r\n    ]);\r\n    irisClasses.push(species);\r\n});\r\n\r\nconst irisPrediction = new PCA(irisDataset).predict(irisDataset);\r\n\r\n// ----- books pca ----\r\nconst bookColumns = ['', '', 'Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width'];\r\nconst bookPcaColumns=  ['PC1', 'PC2', 'Sepal Length', 'Sepal Width', 'Petal Length', 'Petal Width'];\r\n\r\nlet bookDataset: number[][] = [];\r\nlet bookClasses: string[] = [];\r\n\r\nbookData.forEach(({\r\n    UserRating,\r\n    Reviews,\r\n    Price,\r\n    Year,\r\n    Genre\r\n}) => {\r\n    bookDataset.push([\r\n        UserRating,\r\n        Reviews,\r\n        Price,\r\n        Year\r\n    ]);\r\n    bookClasses.push(Genre);\r\n});\r\n\r\nconst bookPrediction = new PCA(bookDataset).predict(bookDataset);\r\nconsole.log(bookPrediction)\r\n// export const config = { dataset, classes, irisColumns, irisPcaColumns, irisPrediction };\r\n\r\nexport const pcaData:pcaDataInterface[] = [\r\n    {\r\n        columns: irisColumns,\r\n        pcaColumns:  irisPcaColumns,\r\n        dataset: irisDataset,\r\n        prediction: irisPrediction,\r\n    },\r\n    {\r\n        columns: bookColumns,\r\n        pcaColumns: bookPcaColumns,\r\n        dataset: bookDataset,\r\n        prediction: bookPrediction\r\n    },\r\n];\r\n\r\nexport interface pcaDataInterface {columns:string[], pcaColumns:string[], dataset:number[][], prediction:Matrix};\r\n\r\n// - change data format for props of graph\r\n// - export config\r\n// - add to the other non kmeans demos\r\n\r\n// const colorMap: ColorMap = {};\r\n// const dataByClass: { [dataClass: string]: number[][] } = {};\r\n// datasetIris.getDistinctClasses().forEach((dataClass: string, i: number) => {\r\n//     colorMap[dataClass] = COLORS[i] || '#de425b';\r\n//     dataByClass[dataClass] = [];\r\n//     dataset.forEach((row, idx) => {\r\n//         if (dataClass === classes[idx]) {\r\n//             dataByClass[dataClass].push([prediction.get(idx, 0), prediction.get(idx, 1)].concat(row));\r\n//         }\r\n//     });\r\n// })\r\n\r\nexport default PCADemo;","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\gaborFilter\\gaborFilter.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\diffofgaussian\\DiffOfGaussian.tsx",["156"],"import React, { useState } from 'react';\r\nimport KernelDisplay from '../common/KernelDisplay';\r\nimport FilterByKernel from '../common/FilterByKernel';\r\nimport DiffofFiltered from '../common/DiffofFiltered';\r\n\r\n// have to use require for this bc it doesn't have a module declaration file or something\r\nconst generateGaussianKernel = require('gaussian-convolution-kernel');\r\n\r\n\r\nconst DoG = (props: { labelColor: string, imgUrl: string }) => {\r\n    const [kernel, setKernel] = useState<number[] | undefined>(undefined);\r\n    const [kernel2, setKernel2] = useState<number[] | undefined>(undefined);\r\n    const [kernelGrid, setKernelGrid] = useState<number[][] | undefined>(undefined);\r\n    const [kernelGrid2, setKernelGrid2] = useState<number[][] | undefined>(undefined);\r\n\r\n\r\n    const configureKernel = (kernelSize: number, sigma: number, sigma2: number) => {\r\n\r\n        const newKernel: number[] = generateGaussianKernel(kernelSize, sigma);\r\n        const newKernel2: number[] = generateGaussianKernel(kernelSize, sigma2);\r\n        const newKernelGrid = newKernel.reduce((rslt: number[][], val, idx) => {\r\n            if (idx % kernelSize === 0) rslt.push([]);\r\n            rslt[rslt.length - 1].push(val);\r\n            return rslt;\r\n        }, []);\r\n        const newKernelGrid2 = newKernel2.reduce((rslt: number[][], val, idx) => {\r\n            if (idx % kernelSize === 0) rslt.push([]);\r\n            rslt[rslt.length - 1].push(val);\r\n            return rslt;\r\n        }, []);\r\n\r\n\r\n        // take difference of the two filters\r\n        // dog = difference of gaussians\r\n        // let dog = newKernel.map((inner, i) => (inner - newKernel2[i]));\r\n\r\n        // let dogGrid = newKernelGrid.map((inner, i) => inner.map((v, j) => (v - newKernelGrid2[i][j])));\r\n\r\n        setKernel(newKernel);\r\n        setKernel2(newKernel2);\r\n        setKernelGrid(newKernelGrid);\r\n        setKernelGrid2(newKernelGrid2);\r\n    }\r\n\r\n    return (\r\n        <div className={`flex flex-col items-center font-bold m-4 ${props.labelColor}`}>\r\n            <KernelConfig onConfig={configureKernel} labelColor={props.labelColor} />\r\n            <div className=\"grid grid-cols-2 items-center mb-5\" style={{ width: '1100px' }}>\r\n                <KernelDisplay kernelGrid={kernelGrid} labelColor={props.labelColor} />\r\n                <KernelDisplay kernelGrid={kernelGrid2} labelColor={props.labelColor} />\r\n            </div>\r\n\r\n            <p>Filter by the First Kernel</p>\r\n            <FilterByKernel kernel={kernel} imgUrl={props.imgUrl} />\r\n            <p>Filter by the Second Kernel</p>\r\n            <FilterByKernel kernel={kernel2} imgUrl={props.imgUrl} />\r\n            <p>Take the Difference of the Filtered Images</p>\r\n            <DiffofFiltered kernel={kernel} kernel2={kernel2} imgUrl={props.imgUrl} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst KernelConfig = (props: { onConfig: (kernelSize: number, sigma: number, sigma2: number) => void, labelColor: string }) => {\r\n    const [kernelSize, setKernelSize] = useState<number>(5);\r\n    const [sigma, setSigma] = useState<number>(1);\r\n    const [sigma2, setSigma2] = useState<number>(3);\r\n\r\n    const changeSigma = (e: any) => setSigma(parseFloat(e.target.value));\r\n    const changeSigma2 = (e: any) => setSigma2(parseFloat(e.target.value));\r\n    const changeKernelSize = (e: any) => setKernelSize(parseInt(e.target.value));\r\n\r\n    const invalidSize = (kernelSize % 2 !== 1 || kernelSize < 3 || kernelSize > 7)\r\n    const invalidConfig = !sigma || invalidSize;\r\n    return (\r\n        <div>\r\n            <div className={`font-bold m-3 ${props.labelColor}`}>\r\n                Sigma\r\n                <input className=\"mx-2 w-64\"\r\n                    type=\"range\" min=\".1\" max=\"10\" step=\"any\"\r\n                    value={sigma} onChange={(e) => changeSigma(e)} />\r\n                <input className=\"number-input text-black\"\r\n                    type=\"number\" min=\".1\" max=\"10\"\r\n                    value={sigma} onChange={(e) => changeSigma(e)} />\r\n            </div>\r\n            <div className={`font-bold m-3 ${props.labelColor}`}>\r\n                Sigma 2\r\n                <input className=\"mx-2 w-64\"\r\n                    type=\"range\" min=\".1\" max=\"10\" step=\"any\"\r\n                    value={sigma2} onChange={(e) => changeSigma2(e)} />\r\n                <input className=\"number-input text-black\"\r\n                    type=\"number\" min=\".1\" max=\"10\"\r\n                    value={sigma2} onChange={(e) => changeSigma2(e)} />\r\n            </div>\r\n            <div className={`font-bold m-3 h-10 ${props.labelColor}`}>\r\n                Kernel Size\r\n                <input className=\"mx-2 w-64\"\r\n                    type=\"range\" min=\"3\" max=\"7\" step={2}\r\n                    value={kernelSize} onChange={(e) => changeKernelSize(e)} />\r\n                <input className=\"number-input text-black\"\r\n                    type=\"number\" min=\"3\" max=\"7\" step={2}\r\n                    value={kernelSize} onChange={(e) => changeKernelSize(e)} />\r\n                <div className=\"font-light italic text-sm\">\r\n                    {invalidSize ? 'Enter an odd kernel size, between 3 and 7' : ''}\r\n                </div>\r\n            </div>\r\n            <button className=\"basic-button\" disabled={invalidConfig} onClick={e => props.onConfig(kernelSize, sigma, sigma2)}>\r\n                Generate Kernel\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getBg(val: number, kernel?: number[]) {\r\n    if (!kernel) return;\r\n    const max = kernel[Math.floor(kernel.length / 2)];\r\n    const min = kernel[0];\r\n    const red = 200 - ((val - min) / (max - min) * 200);\r\n    return { background: `rgb(${red}, 212, 192)` };\r\n}\r\n\r\n\r\n\r\nexport default DoG;","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\haarWavelet\\HaarWaveletDemo.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\imageSelector\\ImageSelectableDemo.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\gaussianBlur\\GaussianBlurDemo.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\index.ts",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\gaborFilter\\AngleSelector.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\haarWavelet\\haarTransform.tsx",["157"],"export { haarFilter};\r\n\r\n// https://stevenbas.art/examples/ImageProcessing/ex4/\r\n\r\n/**\r\n * Applies the haar transformation to the image in `inCanvas`, and draws the output\r\n * on `outCanvas`\r\n * \r\n * @param inCanvas \r\n * @param outCanvas \r\n * @param iterations how many recursions to do\r\n */\r\nfunction haarFilter(inCanvas: HTMLCanvasElement, outCanvas: HTMLCanvasElement, iterations: number) {\r\n    const inData = inCanvas.getContext(\"2d\")?.getImageData(0,0, inCanvas.width, inCanvas.height);\r\n    const outData = outCanvas.getContext(\"2d\")?.getImageData(0,0, outCanvas.width, outCanvas.height);\r\n    if (!inData || !outData) return;\r\n\r\n    const inPix = inData.data;\r\n    const imgWidth = inCanvas.width; //should be the same for outCanvas\r\n    const imgHeight = inCanvas.height;\r\n\r\n    // initialize array with original pix values\r\n    const haar :number[][][] = [];\r\n    for (let row = 0; row < imgHeight; row++) { \r\n        haar[row] = [];\r\n        for (let col = 0; col < imgWidth; col++) {\r\n            haar[row][col] = [];\r\n            for (let i = 0; i < 3; i++) {\r\n                 haar[row][col][i] = inPix[4*(row*imgWidth + col + i)];\r\n            }\r\n        }\r\n    }\r\n\r\n    //Do a Haar Wavelet Transform\r\n    let currWidth = imgWidth;\r\n    let currHeight = imgHeight;\r\n    let haarRow = [];\r\n    while( (currWidth > 1 || currHeight > 1) && (iterations > 1) ) {\r\n        iterations = iterations -1;\r\n\r\n        //Do it for each row first\r\n        if (currWidth > 1) {\r\n            for(let row = 0; row < currHeight; row++){\r\n                for (let i = 0; i < 3; i++) {\r\n                    for(let col = 0; col < currWidth; col++) {\r\n                        haarRow[col] = haar[row][col][i];\r\n                    }\r\n\r\n                    oneDHaarTransform(haarRow);\r\n                    \r\n                    for(let col = 0; col < currWidth; col++) {\r\n                        haar[row][col][i] = haarRow[col];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        //Then perform Haar transform on each column\r\n        haarRow = [];\r\n        if (currHeight > 1) {\r\n            for(let col = 0; col < currWidth; col++) {\r\n                for (let i = 0; i < 3; i++) {\r\n                    for(let row = 0; row < currHeight; row++) {\r\n                        haarRow[row] = haar[row][col][i];\r\n                    }\r\n\r\n                    oneDHaarTransform(haarRow);\r\n                    \r\n                    for(let row = 0; row < currHeight; row++) {\r\n                        haar[row][col][i] = haarRow[row];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        haarRow = [];\r\n\r\n        if (currHeight > 1) {currHeight  = currHeight/2};\r\n        if (currWidth > 1)  {currWidth = currWidth/2};\r\n    }\r\n\r\n    //Copy pix data to canvas\r\n    const outPix = outData.data;\r\n    for (let row = 0; row < imgHeight; row++) {\r\n        for (let col = 0; col < imgWidth; col++) {\r\n            outPix[4*(row*imgWidth + col) ] = haar[row][col][0];\r\n            outPix[4*(row*imgWidth + col)+1 ] = haar[row][col][1];\r\n\r\n            outPix[4*(row*imgWidth + col)+2 ] =  haar[row][col][2];\r\n\r\n            outPix[4*(row*imgWidth + col)+3 ] =  255;\r\n        };\r\n    };\r\n    console.log(outData);\r\n    outCanvas.getContext(\"2d\")?.putImageData(outData,0,0);\r\n}\r\n\r\n\r\nfunction oneDHaarTransform(pixRow: number[]) {\r\n    var sum = 0;\r\n    var diff = 0;\r\n    var halfLen = pixRow.length/2;\r\n    var tempHaar = [];\r\n\r\n    //It only recurses on first half of the array\r\n    for (var i = 0; i < halfLen; i++) {\r\n            sum = pixRow[2*i] + pixRow[2*i + 1];\r\n            sum = sum / Math.sqrt(2);\r\n            diff = pixRow[2*i] - pixRow[2*i + 1];\r\n            diff = diff / Math.sqrt(2);\r\n            tempHaar[i] = sum;\r\n            tempHaar[i + halfLen] = diff\r\n    }\r\n    for (var i = 0; i < pixRow.length; i++) {\r\n        pixRow[i] = tempHaar[i];\r\n    }\r\n};\r\n\r\n","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\imageSelector\\ImageSelector.tsx",["158","159"],"import React, { useEffect } from 'react';\r\nimport './ImageSelector.css';\r\n\r\nconst ImageSelector = (props: { currImg: string, onSelect: (img: string, imgUrl: string) => any }) => {\r\n    useEffect(() => props.onSelect(props.currImg, ALL_IMGS[props.currImg]),\r\n        []);\r\n\r\n    const makeImg = (key: string) => (\r\n        <img key={key}\r\n            className={key === props.currImg ? 'selected' : ''}\r\n            src={ALL_IMGS[key]}\r\n            onClick={() => props.onSelect(key, ALL_IMGS[key])}\r\n        />\r\n    );\r\n\r\n    return (\r\n        <div className='image-selector'>\r\n            Select Image\r\n            <div className='selection-window'>\r\n                {Object.keys(ALL_IMGS).map(key => {\r\n                    return ALL_IMGS[key] && makeImg(key);\r\n                }\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nconst ALL_IMGS: { [name: string]: any } = {\r\n    'three.png': require('../../../media/modules/computerVision/imageLibrary/three.png'),\r\n    'diamond.png': require('../../../media/modules/computerVision/imageLibrary/diamond.png'),\r\n    'square.png': require('../../../media/modules/computerVision/imageLibrary/square.png'),\r\n    'circles.jpg': require('../../../media/modules/computerVision/imageLibrary/circles.jpg'),\r\n    'dogSilhouette.jpg': require('../../../media/modules/computerVision/imageLibrary/dogSilhouette.jpg'),\r\n    'purpleFlowers.jpeg': require('../../../media/modules/computerVision/imageLibrary/purpleFlowers.jpeg'),\r\n    'steps.png': require('../../../media/modules/computerVision/imageLibrary/steps.png'),\r\n    'tabbyCat.jpg': require('../../../media/modules/computerVision/imageLibrary/tabbyCat.jpg'),\r\n    'teddyBear.jpg': require('../../../media/modules/computerVision/imageLibrary/teddyBear.jpg'),\r\n    'zebra.jpg': require('../../../media/modules/computerVision/imageLibrary/zebra.jpg'),\r\n    'bwWoman.jpg': require('../../../media/modules/computerVision/imageLibrary/bwWoman.jpg'),\r\n    'bwMan.jpg': require('../../../media/modules/computerVision/imageLibrary/bwMan.jpg')\r\n}\r\n\r\nexport default ImageSelector;\r\n","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\common\\BasicScatter.tsx",[],["160","161"],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\FilterByKernel.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\InteractiveFilter.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\DiffofFiltered.tsx",["162","163","164"],"import React from 'react';\r\nimport InteractiveFilter from './InteractiveFilter';\r\nimport { convolute } from './filter';\r\nimport { getPixels, createImageData } from './filter';\r\n\r\nconst pixelmatch = require('pixelmatch');\r\n\r\n// http://dev.theomader.com/gaussian-kernel-calculator/\r\n// https://blog.cloudboost.io/using-html5-canvas-with-react-ff7d93f5dc76\r\n\r\nconst FilterByDiffKernel = (props: { kernel?: number[], kernel2?:number[], imgUrl: string }) => {\r\n\r\n    return (\r\n        <InteractiveFilter\r\n            disabled={!props.kernel}\r\n            imgUrl={props.imgUrl}\r\n            filter={(inCanvas, outCanvas) => {\r\n                \r\n                \r\n                props.kernel && convolute(inCanvas, outCanvas, false, props.kernel)\r\n                let check = getPixels(outCanvas)\r\n                if (!check) { \r\n                    return ;\r\n                }\r\n                let result1 = Uint8ClampedArray.from(check.data)\r\n                \r\n                \r\n                props.kernel2 && convolute(inCanvas, outCanvas, false, props.kernel2)\r\n                let check2 = getPixels(outCanvas)\r\n                \r\n                if (!check2) { \r\n                    return ;\r\n                }\r\n                let result2 = Uint8ClampedArray.from(check2.data)\r\n\r\n                let width = check.width\r\n                let height = check.height\r\n                \r\n                let diff = result1.map((pix, i)=> ((i+1)%4== 0 ? 255 : 255 - Math.abs(pix - result2[i])));\r\n                \r\n\r\n                let output = new ImageData(diff, width, height)\r\n                \r\n                outCanvas.getContext('2d')?.putImageData(output, 0, 0);\r\n\r\n\r\n            }}\r\n        />\r\n    )\r\n}\r\n\r\nexport default FilterByDiffKernel;","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\kmeans.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\kmeansStepExample.tsx",["165"],"import React, { useState } from 'react';\r\n\r\nimport trainData from '../datasets/train.json';\r\nimport trainDataIris from '../datasets/iris.json';\r\nimport trainDataIris2 from '../datasets/iris2.json';\r\nimport bookData from '../datasets/books.json';\r\n\r\nimport {InputData, organiseData, KMeansResult, BubbleDataEntry, getClasses, processdata} from './utils';\r\n\r\nimport { Scatter } from 'react-chartjs-2';\r\nimport kmeans from 'ml-kmeans';\r\n\r\ntype KMeansStepExampleType = {\r\n    hidden: boolean,\r\n    xLabel?: string,\r\n    yLabel?: string,\r\n    k?: number,\r\n    trainingData?: InputData[],\r\n    trainingDataIris?: InputData[],\r\n    trainingDataIris2?: InputData[],\r\n    centers?: number[][],\r\n    centersIris?: number[][],\r\n    centersIris2?: number[][],\r\n};\r\n\r\nconst KMeansStepExample:React.FC<KMeansStepExampleType> = ({\r\n    hidden= false,\r\n    xLabel = '',\r\n    yLabel = '',\r\n    k = 2,\r\n    trainingData = trainData,\r\n    trainingDataIris = trainDataIris,\r\n    trainingDataIris2 = trainDataIris2,\r\n    centers = [[50, 70], [50, 80]],\r\n    centersIris = [[2, 2], [7, 5]],\r\n    centersIris2 = [[20, 20], [40, 40]],\r\n}) => {\r\n    const kmeansData:number[][] = organiseData(trainingData);\r\n    const kmeansIrisData:number[][] = organiseData(trainingDataIris);\r\n\r\n    const ans2: KMeansResult[] = kmeans(kmeansData, k, { initialization: centers, withIterations: true }, );\r\n    const ans2iris = kmeans(kmeansIrisData, k, { initialization: centersIris, withIterations: true }, );\r\n\r\n    const kmeansIrisData2 = organiseData(trainingDataIris2);\r\n    const ans2iris2 = kmeans(kmeansIrisData2, k, { initialization: centersIris2, withIterations: true }, );\r\n\r\n    let gen_out: KMeansResult[] = [];\r\n    for (const element of ans2) {\r\n        gen_out.push(element);\r\n    }\r\n\r\n    let gen_outIris:KMeansResult[] = [];\r\n    for (const element of ans2iris) {\r\n        gen_outIris.push(element);\r\n    }\r\n\r\n    let gen_outIris2:KMeansResult[] = [];\r\n    for (const element of ans2iris2) {\r\n        gen_outIris2.push(element);\r\n    }\r\n\r\n    const [original, setO]: [number, Function] = useState(0);\r\n\r\n    const gen = original === 0 ? gen_out : (original === 1 ? gen_outIris : gen_outIris2);\r\n    const [r, setR] = useState(0);\r\n    const changeO = () => {\r\n        setO((original+1) % 3);\r\n        setR(0);\r\n        return;\r\n    }\r\n\r\n    if (gen.length === 0) return <div></div>;\r\n\r\n    let bubData:BubbleDataEntry[] = [];\r\n    let data3 = original === 0 ? organiseData(trainData) : (original === 1 ? organiseData(trainDataIris) : organiseData(trainDataIris2));\r\n    let cntrdss = gen[r].centroids;\r\n    let c2 = [cntrdss[0].centroid, cntrdss[1].centroid];\r\n\r\n    let labels: number[] = getClasses(data3, c2);\r\n\r\n    processdata(bubData, labels, c2, hidden, data3, k);\r\n\r\n    // data that will be put into the chart\r\n    const data:{datasets: BubbleDataEntry[]} = {datasets: []};\r\n\r\n    Object.entries(bubData).forEach((cluster) => {\r\n        data.datasets.push(cluster[1]);\r\n    });\r\n\r\n    const options = {\r\n        showLines: false,\r\n        tooltips: {enabled: false},\r\n        scales: {\r\n            yAxes: [{\r\n                scaleLabel: { display: true, labelString: yLabel, fontSize: 16, fontFamily: 'open sans', fontStyle: 'italic bold', fontColor: \"#394D73\" },\r\n                gridLines: {lineWidth: 3, color: '#8D9DBA'},\r\n                ticks: {\r\n                    fontColor: '#394D73',\r\n                    beginAtZero: true,\r\n                    min: original === 0 ? 0 : (original === 1 ? 1 : 0),\r\n                    max: original === 0 ? 120 : (original === 1 ? 7 : 40),\r\n                }\r\n            }],\r\n            xAxes: [{\r\n                scaleLabel: { display: true, labelString: xLabel, fontSize: 16, fontFamily: 'open sans', fontStyle: 'italic bold', fontColor: \"#394D73\" },\r\n                gridLines: {lineWidth: 3, color: '#8D9DBA'},\r\n                ticks: {\r\n                    fontColor: '#394D73',\r\n                    beginAtZero: true,\r\n                    min: original === 0 ? 0 : (original === 1 ? 1 : 0),\r\n                    max: original === 0 ? 250 : (original === 1 ? 10 : 100),\r\n                }\r\n            }],\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontSize: 14,\r\n                fontFamily: 'arial',\r\n                fontStyle: 'bold',\r\n                fontColor: \"#394D73\"\r\n            }\r\n        },\r\n        animation: {\r\n            duration: 0\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Scatter data={data} options={options}/>\r\n            <div className=\"text-moduleOffwhite m-3 -mt-2 space-x-2 justify-center space-y-3\">\r\n                <div className=\"flex justify-around rounded w-1/4 mx-auto bg-moduleNavy\">\r\n                    <button onClick={() => setR(prevR => Math.max(prevR - 1, 0))}\r\n                            className=\"rounded mx-auto py-1 hover:text-moduleTeal outline-none\">\r\n                        <span className=\"m-auto text-2xl font-thin\">−</span>\r\n                    </button>\r\n                    <div className=\"md:inline py-2\">Step {r}/{gen.length - 1}</div>\r\n                    <button onClick={() => setR(prevR => Math.min(prevR + 1, gen.length - 1))}\r\n                            className=\"rounded mx-auto py-1 hover:text-moduleTeal outline-none\">\r\n                        <span className=\"m-auto text-2xl font-thin\">+</span>\r\n                    </button>\r\n                </div>\r\n                <div className=\"flex justify-around rounded bg-transparent\">\r\n                    <button onClick={e => changeO()}\r\n                            className=\"rounded w-1/3 mx-auto px-1 py-2 bg-moduleNavy hover:text-moduleTeal outline-none\">\r\n                        {original === 0 ? \"Current: Original Dataset\" : (original === 1 ? \"Current: Iris Sepal Dataset\" : \"Current: Iris Petal Dataset\")}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default KMeansStepExample;\r\n","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\interactiveClusteringExample.tsx",["166"],"import React, { useState } from 'react';\r\n\r\nimport trainData from '../datasets/train.json';\r\nimport trainDataIris from '../datasets/iris.json';\r\nimport trainDataIris2 from '../datasets/iris2.json';\r\nimport titanicData from '../datasets/titanic.json';\r\nimport bookData from '../datasets/books.json';\r\n\r\nimport dragData from 'chartjs-plugin-dragdata'; \r\nimport { Scatter } from 'react-chartjs-2';\r\nimport kmeans from 'ml-kmeans';\r\nimport './chartjs-plugin-dragdata.d.ts';\r\n\r\nimport {organiseData, InputData, AddedPointList, PointToRemove, PointToRemoveList, BubbleDataEntry, processdata, AddedPoint, KMeansResult} from './utils';\r\n\r\ntype InteractiveClusteringExampleType = {\r\n    hidden: boolean,\r\n    yLabel?: string,\r\n    xLabel?: string\r\n    k?: number,\r\n    centersList?: number[][][],\r\n    trainingDatasets?: InputData[][],\r\n};\r\n\r\nconst InteractiveClusteringExample: React.FC<InteractiveClusteringExampleType> = ({\r\n    hidden = false,\r\n    xLabel = '',\r\n    yLabel = '',\r\n    k = 2,\r\n    // 0 == original data\r\n    // 1 == iris data\r\n    // 2 == diff iris data\r\n    // 3 == titanic data\r\n    // change to an int if more datasets\r\n    trainingDatasets = [trainData, trainDataIris, trainDataIris2, bookData],\r\n    centersList = [\r\n        [[0, 0], [50, 50]],\r\n        [[2, 2], [7, 5]],\r\n        [[20, 20], [40, 40]],\r\n        [[3000, 3], [12000, 20]]\r\n    ],\r\n}) => {\r\n    // index corresponds to the datasets as numbered above\r\n    const yAxisMin: number[] = [0, 1, 0, 0];\r\n    const yAxisMax: number[] = [120, 7, 40, 40];\r\n    const xAxisMin: number[] = [0, 1, 0, 0];\r\n    const xAxisMax: number[] = [250, 10, 100, 50000];\r\n\r\n    let organizedDatasets = [];\r\n    for(const dataset of trainingDatasets) {\r\n        organizedDatasets.push(organiseData(dataset));\r\n    };\r\n\r\n    let kmeansAnswers: KMeansResult[]  = [];\r\n    for (let i = 0; i < trainingDatasets.length; ++i) {\r\n        kmeansAnswers.push(kmeans(organizedDatasets[i], k, { initialization: centersList[i], maxIterations: 1 }, ));\r\n    }\r\n\r\n    const [originalDataset, setO] = useState(0);\r\n\r\n    const changeO = (nextDataset: number) => {\r\n        setX1Idx(kmeansAnswers[nextDataset]['centroids'][0].centroid[0]);\r\n        setY1Idx(kmeansAnswers[nextDataset]['centroids'][0].centroid[1]);\r\n        setX2Idx(kmeansAnswers[nextDataset]['centroids'][1].centroid[0]);\r\n        setY2Idx(kmeansAnswers[nextDataset]['centroids'][1].centroid[1]);\r\n\r\n        setO(nextDataset);\r\n    }\r\n\r\n    const centersx = kmeansAnswers[originalDataset]['centroids'];\r\n\r\n    // in order to make the chart updateable after moving a center\r\n    const [x1Idx, setX1Idx] = useState(centersx[0].centroid[0]);\r\n    const [y1Idx, setY1Idx] = useState(centersx[0].centroid[1]);\r\n    const [x2Idx, setX2Idx] = useState(centersx[1].centroid[0]);\r\n    const [y2Idx, setY2Idx] = useState(centersx[1].centroid[1]);\r\n\r\n    const [addedPoints, setAP]:AddedPointList = useState([[], [], [], []]);\r\n    const addPoint = (index: number, newPoint: AddedPoint) => {\r\n        let newAddedPoints: AddedPoint[][] = [...addedPoints];\r\n        newAddedPoints[index] = newAddedPoints[index].concat(newPoint);\r\n        setAP(newAddedPoints);\r\n    }\r\n\r\n    const [pointsToRemove, setRT]: PointToRemoveList = useState([[], [], [], []]);\r\n    const addPointToRemove = (index: number, newPoint: PointToRemove) => {\r\n        let newPoints: PointToRemove[][] = [...pointsToRemove];\r\n        newPoints[index] = newPoints[index].concat(newPoint);\r\n        setRT(newPoints);\r\n    }\r\n\r\n    const [percentRemove, setPR] = useState(16);\r\n    const [editable, setEdit] = useState(true);\r\n    const [base, setBase] = useState(true);\r\n\r\n    let trainData2:InputData[] = trainingDatasets[originalDataset].slice();\r\n\r\n    // Remove a percentage of the data\r\n    if (originalDataset === 0) {\r\n        for (let i = trainData2.length; i > 0; i--) {\r\n            if (i % 20 === 0) {\r\n                trainData2.splice(i, percentRemove)\r\n            }\r\n        }\r\n    }\r\n    else {\r\n        for (let i = trainData2.length; i > 0; i--) {\r\n            if (i % 4 === 0) {\r\n                trainData2.splice(i, percentRemove - 16)\r\n            }\r\n        }\r\n    }\r\n\r\n    trainData2 = base ? trainData2.concat(addedPoints[originalDataset]) : addedPoints[originalDataset];\r\n\r\n    // where our data is going to be, 'bubble data'\r\n    let bubData: BubbleDataEntry[] = [];\r\n\r\n    // possible edge case: if one dataset has fewer than 2 points, need fake data for kmeans\r\n    // as users can remove datapoints this is necessary\r\n    const fakepoints = [{ Distance_Feature: 2, Speeding_Feature: 2 },\r\n        { Distance_Feature: 1, Speeding_Feature: 1 }];\r\n\r\n    // format needed for kmeans()\r\n    const c2 = [[x1Idx, y1Idx], [x2Idx, y2Idx]];\r\n\r\n    if (trainData2.length >= 2) {\r\n        const ans_x = kmeans(organiseData(trainData2), k, { initialization: c2, maxIterations: 1 }, );\r\n        const data3 = organiseData(trainData2);\r\n        processdata(bubData, ans_x.clusters, c2, hidden, data3, k);\r\n    }\r\n    else {\r\n        const s = trainData2.concat(fakepoints);\r\n        const ans_x = kmeans(organiseData(s), k, { initialization: c2, maxIterations: 1 }, );\r\n        const data3 = organiseData(trainData2)\r\n        const clustersss = trainData2.length === 1 ? [ans_x.clusters[0]] : [];\r\n        processdata(bubData, clustersss, c2, hidden, data3, k);\r\n    }\r\n\r\n    // data that will be put into the chart\r\n    const data:{datasets: BubbleDataEntry[]} = { datasets : [] };\r\n\r\n    Object.entries(bubData).forEach((cluster) => {\r\n        data.datasets.push(cluster[1]);\r\n    });\r\n\r\n    // remove removethese from data\r\n    for (const removethese of pointsToRemove) {\r\n        for (let i = 0; i < removethese.length; i++) {\r\n            data.datasets[removethese[i].ds_index].data.splice(removethese[i].ind, 1);\r\n        }\r\n    }\r\n\r\n    const onDragEnd = (e: React.ChangeEvent, datasetIndex: number, index: number, value: {x: number, y: number}) => {\r\n        if (!e) return;\r\n        if (datasetIndex === 0) {\r\n            setX1Idx(value.x);\r\n            setY1Idx(value.y);\r\n        }\r\n        if (datasetIndex === 1) {\r\n            setX2Idx(value.x);\r\n            setY2Idx(value.y);\r\n        }\r\n    }\r\n\r\n    const options = {\r\n        showLines: false,\r\n        tooltips: { enabled: false },\r\n        scales: {\r\n            yAxes: [{\r\n                scaleLabel: { display: true, labelString: yLabel, fontSize: 16, fontFamily: 'open sans', fontStyle: 'italic bold', fontColor: \"#CBD9F2\" },\r\n                gridLines: {lineWidth: 3, color: '#8D9DBA'},\r\n                ticks: {\r\n                    fontColor: '#CBD9F2',\r\n                    beginAtZero: true,\r\n                    min: yAxisMin[originalDataset],\r\n                    max: yAxisMax[originalDataset],\r\n                }\r\n            }],\r\n            xAxes: [{\r\n                scaleLabel: { display: true, labelString: xLabel, fontSize: 16, fontFamily: 'open sans', fontStyle: 'italic bold', fontColor: \"#CBD9F2\" },\r\n                gridLines: {lineWidth: 3, color: '#8D9DBA'},\r\n                ticks: {\r\n                    fontColor: '#CBD9F2',\r\n                    beginAtZero: true,\r\n                    min: xAxisMin[originalDataset],\r\n                    max: xAxisMax[originalDataset],\r\n                }\r\n            }],\r\n        },\r\n        legend: {\r\n            labels: {\r\n                fontSize: 14,\r\n                fontFamily: 'arial',\r\n                fontStyle: 'bold',\r\n                fontColor: \"#CBD9F2\"\r\n            }\r\n        },\r\n        dragData: true,\r\n        dragX: true,\r\n        dragDataRound: 0,\r\n        onClick : function (evt: MouseEvent) {\r\n            if (editable) {\r\n                // all the // @ts-ignore 's from here on are due to the fact that we can't access of 'this' until onClick is called\r\n                // inside the react component\r\n                // @ts-ignore\r\n                const asdgwg = this.chart.getElementAtEvent(evt)[0];\r\n\r\n                 // @ts-ignore\r\n                 let yTop = this.chartArea.top;\r\n                 // @ts-ignore\r\n                 let yBottom = this.chartArea.bottom;\r\n                 // @ts-ignore\r\n                 let yMin = this.scales['y-axis-1'].min;\r\n                 // @ts-ignore\r\n                 let yMax = this.scales['y-axis-1'].max;\r\n                 let newY = 0;\r\n\r\n                 if (evt.offsetY <= yBottom && evt.offsetY >= yTop) {\r\n                     newY = Math.abs((evt.offsetY - yTop) / (yBottom - yTop));\r\n                     newY = (newY - 1) * -1;\r\n                     newY = newY * (Math.abs(yMax - yMin)) + yMin;\r\n                 };\r\n                 // @ts-ignore\r\n                 let xTop = this.chartArea.left;\r\n                 // @ts-ignore\r\n                 let xBottom = this.chartArea.right;\r\n                 // @ts-ignore\r\n                 let xMin = this.scales['x-axis-1'].min;\r\n                 // @ts-ignore\r\n                 let xMax = this.scales['x-axis-1'].max;\r\n                 let newX = 0;\r\n\r\n                 if (evt.offsetX <= xBottom && evt.offsetX >= xTop) {\r\n                     newX = Math.abs((evt.offsetX - xTop) / (xBottom - xTop));\r\n                     newX = newX * (Math.abs(xMax - xMin)) + xMin;\r\n                 };\r\n                 \r\n                 // checking to make sure where you click isnt on the centroids\r\n                 // dont want to remove those\r\n                 const rad = 7\r\n                 const inXBounds = ((newX < x1Idx + rad) && (newX > x1Idx - rad)) || ((newX < x2Idx + rad) && (newX > x2Idx - rad))\r\n                 const inYBounds = ((newY < y1Idx + rad) && (newY > y1Idx - rad)) || ((newY < y2Idx + rad) && (newY > y2Idx - rad))\r\n\r\n                const onCentroid =  inXBounds && inYBounds\r\n\r\n                if (asdgwg && !onCentroid) {\r\n                    let ds_index = asdgwg._datasetIndex\r\n                    let ind = asdgwg._index\r\n\r\n                    \r\n                    addPointToRemove(originalDataset, {ds_index, ind});\r\n\r\n                    // @ts-ignore\r\n                    setX1Idx(this.chart.data.datasets[0].data[0].x  + 0.1);\r\n                    // @ts-ignore\r\n                    setX1Idx(this.chart.data.datasets[0].data[0].x  - 0.1);\r\n                    return;\r\n                }\r\n                else {\r\n                \r\n                    if (newX > 0 && newY > 0) {\r\n\r\n                        const point = {Distance_Feature: newX, Speeding_Feature: newY};\r\n                        addPoint(originalDataset, point);\r\n\r\n                        // forces the chart to update because it won't rerender otherwise\r\n                        // @ts-ignore\r\n                        setX1Idx(this.chart.data.datasets[0].data[0].x  + 0.1)\r\n                        // @ts-ignore\r\n                        setX1Idx(this.chart.data.datasets[0].data[0].x  - 0.1)\r\n                    }\r\n\r\n                }\r\n            }\r\n        },\r\n        \r\n        onDragEnd,\r\n        onDragStart:onDragEnd,\r\n        onDrag:onDragEnd,\r\n        animation: {\r\n            duration: 0\r\n        },\r\n    };\r\n\r\n    const datasetLabel = [\r\n        \"Original Dataset\",\r\n        \"Iris Sepal Dataset\",\r\n        \"Iris Petal Dataset\",\r\n        \"Books Dataset\",\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <Scatter data={data} options={options} plugins={[dragData]}  />\r\n            </div>\r\n            <div className=\"flex-row space-x-10 mb-5\">\r\n                <div className=\"axis-selector inline\">\r\n                    <button className={ percentRemove===19 ? \"selected\" : \"\"} onClick={e => setPR(19)}>A Fourth of the Points</button>\r\n                    <button className={ percentRemove===18 ? \"selected\" : \"\"} onClick={e => setPR(18)}>Half of the Points</button>\r\n                    <button className={ percentRemove===16 ? \"selected\" : \"\"}  onClick={e => setPR(16)}>All of the Points</button>\r\n                </div>\r\n                <div className=\"axis-selector inline\">\r\n                    <button style={{color:'white'}} onClick={e => setBase(!base)}> {base ? \"Show Only Custom\" : \"Show Full Dataset\"}</button>\r\n                    <button style={{color:'white'}} onClick={e => setEdit(!editable)} > {editable ? \"Disable Editing\" : \"Enable Editing\"} </button>\r\n                    <button onClick={e => changeO((originalDataset+1) % 4)}>Current: {datasetLabel[originalDataset]}</button>\r\n                </div>\r\n            </div>\r\n        </div>);\r\n};\r\n\r\nexport default InteractiveClusteringExample;\r\n","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\filter.tsx",["167"],"\r\nexport {\r\n  convolute, getPixels, createImageData\r\n};\r\n\r\n/// utility functions for filtering / manipulating a DOM canvas\r\n// reference: https://www.html5rocks.com/en/tutorials/canvas/imagefilters/\r\n\r\n/**\r\n * Run an image convolution based on inCanvas, and draws the output to outCanvas.\r\n * Don't ask me how any of this works!!!! I dont know!!!!!!! \r\n * \r\n * @param inCanvas the canvas to be filtered, with an image already drawn on it\r\n * @param outCanvas the canvas to be outputted to\r\n * @param animate whether or not to animate the filter by each row of pixels\r\n * @param weights the kernel (matrix of numbers)\r\n * @param opaque (optional) is the image opaque?\r\n */\r\nfunction convolute(inCanvas: HTMLCanvasElement, outCanvas: HTMLCanvasElement, animate: boolean, weights: number[], opaque?: boolean) {\r\n  const pixels = getPixels(inCanvas);\r\n  const output = getPixels(outCanvas);\r\n  if (!pixels || !output) return;\r\n\r\n  var side = Math.round(Math.sqrt(weights.length));\r\n  var halfSide = Math.floor(side / 2);\r\n  var src = pixels.data;\r\n  var sw = pixels.width;\r\n  var sh = pixels.height;\r\n  // pad output by the convolution matrix\r\n  var w = sw;\r\n  var h = sh;\r\n  var dst = output.data;\r\n  // go through the destination image pixels\r\n  var alphaFac = opaque ? 1 : 0;\r\n\r\n  const processRow = (y : number) => {\r\n    for (var x = 0; x < w; x++) {\r\n      var sy = y;\r\n      var sx = x;\r\n      var dstOff = (y * w + x) * 4;\r\n      var nextDstOff = ((y + 1) * w + x) * 4;\r\n      // calculate the weighed sum of the source image pixels that\r\n      // fall under the convolution matrix\r\n      var r = 0, g = 0, b = 0, a = 0;\r\n      for (var cy = 0; cy < side; cy++) {\r\n        for (var cx = 0; cx < side; cx++) {\r\n          var scy = sy + cy - halfSide;\r\n          var scx = sx + cx - halfSide;\r\n          if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {\r\n            var srcOff = (scy * sw + scx) * 4;\r\n            var wt = weights[cy * side + cx];\r\n            r += src[srcOff] * wt;\r\n            g += src[srcOff + 1] * wt;\r\n            b += src[srcOff + 2] * wt;\r\n            a += src[srcOff + 3] * wt;\r\n          }\r\n        }\r\n      }\r\n      \r\n      dst[dstOff] = r;\r\n      dst[dstOff + 1] = g;\r\n      dst[dstOff + 2] = b;\r\n      dst[dstOff + 3] = a + alphaFac * (255 - a);\r\n      dst[nextDstOff] = 255;\r\n      dst[nextDstOff + 1] = 0;\r\n      dst[nextDstOff + 2] = 0;\r\n    }\r\n  }\r\n\r\n  if (animate) {\r\n    var y = 0;\r\n    const interval = setInterval(() => {\r\n      processRow(y);\r\n      outCanvas.getContext(\"2d\")?.putImageData(output, 0, 0);\r\n      y++;\r\n      if (y >= h) clearInterval(interval);\r\n    }, 10);\r\n  } else {\r\n    for (var y = 0; y < h; y++) {\r\n      processRow(y);\r\n    }\r\n    outCanvas.getContext(\"2d\")?.putImageData(output, 0, 0);\r\n  }\r\n}\r\n\r\nfunction getPixels(canvas: HTMLCanvasElement) {\r\n  var ctx = canvas.getContext('2d');\r\n  return ctx && ctx.getImageData(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\nfunction createImageData(canvas: HTMLCanvasElement) {\r\n  var ctx = canvas.getContext('2d');\r\n  return ctx && ctx.createImageData(canvas.width, canvas.height);\r\n}\r\n\r\n","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\utils.ts",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\stateSpaces\\kmeans\\chartjs-plugin-dragdata.d.ts",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\landingPage\\LandingPage.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modulePage\\ModulePage.tsx",["168"],"import React from \"react\";\r\nimport {RouteComponentProps} from 'react-router';\r\nimport ModuleSection from \"./ModuleSection\";\r\nimport module8 from '../media/modules/module_8.json';\r\nimport module9 from '../media/modules/module_9.json';\r\nimport module10 from '../media/modules/module_10.json';\r\nimport module11 from '../media/modules/module_11.json';\r\n\r\nexport interface ModuleSubsection {\r\n    \"title\": string,\r\n    \"body\": string,\r\n    \"imgSrc\": string\r\n}\r\ninterface ModuleSection {\r\n    \"title\": string,\r\n    \"colorScheme\": string,\r\n    \"subsections\": ModuleSubsection[],\r\n    \"demoComp\": string\r\n}\r\ninterface Module {\r\n    \"number\": number,\r\n    \"title\": string,\r\n    \"sections\": ModuleSection[]\r\n}\r\nconst modules: Record<string, Module> = {'computer-vision': module8, 'classification' : module9, 'perceptrons' : module10, 'neural-nets' : module11}\r\n\r\n/**\r\n * Renders the entire module page.\r\n * @param props.match.params.module name of the current module (route has path /modules/module)\r\n */\r\nexport default function ModulePage(props: RouteComponentProps<{module: string}>) {\r\n    const module = modules[props.match.params.module];\r\n    if (!module) {\r\n        return (\r\n            <div>\r\n                <p>This module does not exist.</p>\r\n                <a href=\"/\">Return to home</a>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"container w-screen\">\r\n            <p className={`w-screen p-4 text-5xl font-bold font-opensans bg-modulePaleBlue text-moduleNavy`}>{module.title}</p>\r\n            <ul>\r\n                {\r\n                    module.sections.map((section) =>\r\n                        <ModuleSection title={section.title}\r\n                                       sections={section.subsections}\r\n                                       colorScheme={section.colorScheme}\r\n                                       key={section.title}\r\n                                       demoComp={section.demoComp}/>\r\n                    )\r\n                }\r\n            </ul>\r\n        </div>\r\n    );\r\n}","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\landingPage\\ModuleIntro.tsx",[],"C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modulePage\\ModuleSection.tsx",["169"],"import React from \"react\";\r\nimport GaussianBlurDemo from \"../modules/computerVision/gaussianBlur/GaussianBlurDemo\";\r\nimport GaborDemo from \"../modules/computerVision/gaborFilter/gaborFilter\";\r\nimport DiffOfGaussianDemo from \"../modules/computerVision/diffofgaussian/DiffOfGaussian\";\r\nimport HaarWaveletDemo from \"../modules/computerVision/haarWavelet/HaarWaveletDemo\";\r\nimport { ImageSelectableDemo } from \"../modules/computerVision/imageSelector/ImageSelectableDemo\";\r\nimport PCADemo from \"../modules/stateSpaces/pca/PCA\";\r\nimport { /**RawDataTable , SelectableAxisChart,**/ StaticAxisChart, AxisSelector, pcaData as pcaConfig} from \"../modules/stateSpaces/pca/PCA\";\r\n\r\nimport {ModuleSubsection} from \"./ModulePage\";\r\nimport KMeans, {KMeansStepExample, InteractiveClusteringExample} from '../modules/stateSpaces/kmeans';\r\n\r\nconst lorem = 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.';\r\n\r\ninterface ColorScheme {\r\n    \"bgColor\": string,\r\n    \"titleColor\": string,\r\n    \"headingColor\": string,\r\n    \"bodyColor\": string,\r\n    \"labelColorHex\": string\r\n}\r\n\r\n/**\r\n * Renders a single section on the module page.\r\n *\r\n * @param props.title section title\r\n * @param props.sections subsections of the section\r\n * @param props.colorScheme configuration for the section's color scheme, see ColorScheme interface\r\n * @param props.key section's identifier; usually the section title\r\n * @param props.demoComp name of the React component used as a demo\r\n */\r\nexport default function ModuleSection(props:\r\n    {title: string, sections: ModuleSubsection[], colorScheme: string, key: string, demoComp: string}) {\r\n    const scheme = props.colorScheme === 'dark' ? {\r\n        \"bgColor\": \"bg-moduleDarkBlue\",\r\n        \"titleColor\": \"text-modulePaleBlue\",\r\n        \"headingColor\": \"text-moduleTeal\",\r\n        \"bodyColor\": \"text-moduleOffwhite\",\r\n        \"labelColorHex\": \"#CBD9F2\"\r\n    } : {\r\n        \"bgColor\": \"bg-modulePaleBlue\",\r\n        \"titleColor\": \"text-moduleNavy\",\r\n        \"headingColor\": \"text-moduleDarkBlue\",\r\n        \"bodyColor\": \"text-moduleNavy\",\r\n        \"labelColorHex\": \"#394D73\"\r\n    };\r\n\r\n    return (\r\n        <div className={`flex flex-col w-screen ${scheme.bgColor}`}>\r\n            <div className=\"mx-12 md:mx-40\">\r\n                <p className={`my-12 text-3xl md:text-6xl italic font-bold font-opensans ${scheme.titleColor}`}>{props.title}</p>\r\n                <ul className=\"\">\r\n                    {\r\n                        props.sections.map((section, index) => {\r\n                            return (\r\n                                <div className={`flex flex-col md:flex-row mx-2 md:my-5 ${section.imgSrc === '/blank.png' && \"my-10\"} ${section.body ? \"\" : \"hidden\"}`} key={index}>\r\n                                    <img src={process.env.PUBLIC_URL + section.imgSrc} alt=\"\"\r\n                                         className={`hidden ${index % 2 !== 0 && \"md:flex\"} ${section.imgSrc === '/blank.png' ? \"hidden md:object-none\" : \"object-contain\"} md:w-1/4 md:mr-16 md:-mt-12`}/>\r\n                                    <div className=\"md:w-2/3 flex-col\">\r\n                                        <p className={`my-2 text-left text-lg font-medium font-mono ${scheme.bodyColor}`}>{section.body || lorem}</p>\r\n                                    </div>\r\n                                    <img src={process.env.PUBLIC_URL + section.imgSrc} alt=\"\"\r\n                                         className={`${index % 2 !== 0 && \"md:hidden\"} ${section.imgSrc === '/blank.png' ? \"hidden md:object-none\" : \"object-contain\"} md:w-1/4 md:mr-16 md:-mt-12`}/>\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </ul>\r\n                {\r\n                    getDemo(props.demoComp, scheme)\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getDemo(comp: string, scheme: ColorScheme) {\r\n    const demoArgs = {labelColor: scheme.titleColor}\r\n\r\n    switch (comp) {\r\n        case \"GaussianBlurDemo\": \r\n            return <ImageSelectableDemo Demo={GaussianBlurDemo} initImg='purpleFlowers.jpeg' demoProps={demoArgs}/>\r\n        case \"GaborDemo\": \r\n            return <ImageSelectableDemo Demo={GaborDemo} initImg='zebra.jpg' demoProps={demoArgs}/>\r\n        case \"DiffOfGaussian\": \r\n            return <ImageSelectableDemo Demo={DiffOfGaussianDemo} initImg='tabbyCat.jpg' demoProps={demoArgs}/>\r\n        case \"HaarWaveletDemo\": \r\n            return <ImageSelectableDemo Demo={HaarWaveletDemo} initImg='bwWoman.jpg' demoProps={demoArgs}/>\r\n        case \"PCADemo\":\r\n            return <PCADemo {...demoArgs} />\r\n        // case \"RawDataTable\":\r\n        //     return <RawDataTable />\r\n        case \"StaticAxisChart\":\r\n            return <StaticAxisChart {...pcaConfig}/>\r\n        // case \"SelectableAxisChart\":\r\n        //     return <SelectableAxisChart columnSet={pcaConfig.columns} initXIdx={4} initYIdx={5} labelColor={scheme.titleColor} labelColorHex={scheme.labelColorHex}/>\r\n        // case \"PCASelectableAxisChart\":\r\n        //     return <SelectableAxisChart columnSet={pcaConfig.pcaColumns} initXIdx={0} initYIdx={1} labelColor={scheme.titleColor} labelColorHex={scheme.labelColorHex}/>\r\n        case \"InteractiveKMeans\":\r\n            return <div><InteractiveClusteringExample hidden = {false} /></div>\r\n        case \"StepKMeans\":\r\n            return <div><KMeansStepExample hidden = {false}/></div>\r\n        case \"KMeans\":\r\n            return <KMeans />\r\n        default: return <div></div>\r\n    }\r\n}\r\n","C:\\Users\\dankr\\Documents\\sandbox\\a-eye2\\a-eye\\src\\modules\\computerVision\\common\\KernelDisplay.tsx",[],{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"170","replacedBy":"171"},{"ruleId":"172","replacedBy":"173"},{"ruleId":"174","severity":1,"message":"175","line":97,"column":11,"nodeType":"176","messageId":"177","endLine":97,"endColumn":18},{"ruleId":"174","severity":1,"message":"178","line":99,"column":11,"nodeType":"176","messageId":"177","endLine":99,"endColumn":32},{"ruleId":"174","severity":1,"message":"179","line":108,"column":11,"nodeType":"176","messageId":"177","endLine":108,"endColumn":23},{"ruleId":"174","severity":1,"message":"180","line":140,"column":7,"nodeType":"176","messageId":"177","endLine":140,"endColumn":13},{"ruleId":"174","severity":1,"message":"181","line":114,"column":10,"nodeType":"176","messageId":"177","endLine":114,"endColumn":15},{"ruleId":"182","severity":1,"message":"183","line":113,"column":14,"nodeType":"176","messageId":"184","endLine":113,"endColumn":15},{"ruleId":"185","severity":1,"message":"186","line":6,"column":9,"nodeType":"187","endLine":6,"endColumn":11,"suggestions":"188"},{"ruleId":"189","severity":1,"message":"190","line":9,"column":9,"nodeType":"191","endLine":13,"endColumn":11},{"ruleId":"170","replacedBy":"192"},{"ruleId":"172","replacedBy":"193"},{"ruleId":"174","severity":1,"message":"194","line":4,"column":21,"nodeType":"176","messageId":"177","endLine":4,"endColumn":36},{"ruleId":"174","severity":1,"message":"195","line":6,"column":7,"nodeType":"176","messageId":"177","endLine":6,"endColumn":17},{"ruleId":"196","severity":1,"message":"197","line":39,"column":59,"nodeType":"198","messageId":"199","endLine":39,"endColumn":61},{"ruleId":"174","severity":1,"message":"200","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":16},{"ruleId":"174","severity":1,"message":"201","line":6,"column":8,"nodeType":"176","messageId":"177","endLine":6,"endColumn":19},{"ruleId":"182","severity":1,"message":"202","line":79,"column":14,"nodeType":"176","messageId":"184","endLine":79,"endColumn":15},{"ruleId":"182","severity":1,"message":"203","line":14,"column":11,"nodeType":"176","messageId":"184","endLine":14,"endColumn":24},{"ruleId":"174","severity":1,"message":"204","line":8,"column":69,"nodeType":"176","messageId":"177","endLine":8,"endColumn":81},"no-native-reassign",["205"],"no-negated-in-lhs",["206"],"@typescript-eslint/no-unused-vars","'changeO' is assigned a value but never used.","Identifier","unusedVar","'points' is assigned a value but never used.","'datasetLabel' is assigned a value but never used.","'COLORS' is assigned a value but never used.","'getBg' is defined but never used.","@typescript-eslint/no-redeclare","'i' is already defined.","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["207"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["205"],["206"],"'createImageData' is defined but never used.","'pixelmatch' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'bookData' is defined but never used.","'titanicData' is defined but never used.","'y' is already defined.","'ModuleSection' is already defined.","'AxisSelector' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"208","fix":"209"},"Update the dependencies array to be: [props]",{"range":"210","text":"211"},[266,268],"[props]"]